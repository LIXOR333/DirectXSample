name: Build Rust Alkad 2588 Cheat DLL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2019 # Используем runner с предустановленным Visual Studio 2019

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          imgui
          minhook
          zlib
          json-develop
        key: ${{ runner.os }}-deps-${{ hashFiles('.github/workflows/build.yml') }}

    - name: Set up MSVC for Visual Studio 2019
      run: |
        echo Setting up MSVC for Visual Studio 2019... >> logs/build.log
        for /f "tokens=*" %%i in ('"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -version 16 -property installationPath') do set "VS2019_PATH=%%i"
        if not defined VS2019_PATH (
          echo Error: Visual Studio 2019 not found >> logs/build.log
          exit 1
        )
        call "%VS2019_PATH%\VC\Auxiliary\Build\vcvars64.bat"
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to set up MSVC for Visual Studio 2019 >> logs/build.log
          exit 1
        )
        echo MSVC for Visual Studio 2019 set up successfully >> logs/build.log
      shell: cmd

    - name: Create log directory
      run: |
        if not exist logs mkdir logs
        echo Created logs directory >> logs/build.log
      shell: cmd

    - name: Download ImGui (full repository)
      run: |
        echo Downloading ImGui... >> logs/build.log
        curl -L -o imgui.zip https://github.com/ocornut/imgui/archive/refs/heads/master.zip
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to download ImGui from primary source >> logs/build.log
          exit 1
        )
        echo Unzipping ImGui... >> logs/build.log
        powershell -command "Expand-Archive -Path imgui.zip -DestinationPath temp_imgui -Force"
        if not exist temp_imgui\imgui-master (
          echo Error: imgui-master directory not found after unzip >> logs/build.log
          dir temp_imgui /s /b >> logs/build.log 2>&1
          exit 1
        )
        move temp_imgui\imgui-master imgui
        if not exist imgui\imgui.h (
          echo Error: imgui.h not found in imgui >> logs/build.log
          dir imgui /s /b >> logs/build.log 2>&1
          exit 1
        )
        if not exist imgui\backends\imgui_impl_dx11.h (
          echo Error: imgui_impl_dx11.h not found in imgui/backends >> logs/build.log
          dir imgui\backends /s /b >> logs/build.log 2>&1
          exit 1
        )
        echo ImGui downloaded and verified >> logs/build.log
      shell: cmd
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Download and Build MinHook
      run: |
        echo Downloading MinHook... >> logs/build.log
        curl -L -o minhook.zip https://github.com/TsudaKageyu/minhook/archive/refs/heads/master.zip
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to download MinHook from primary source >> logs/build.log
          exit 1
        )
        echo Unzipping MinHook... >> logs/build.log
        powershell -command "Expand-Archive -Path minhook.zip -DestinationPath temp_minhook -Force"
        if not exist temp_minhook\minhook-master (
          echo Error: MinHook directory not found after unzip >> logs/build.log
          dir temp_minhook /s /b >> logs/build.log 2>&1
          exit 1
        )
        move temp_minhook\minhook-master minhook
        if not exist minhook\include\MinHook.h (
          echo Error: MinHook.h not found in minhook >> logs/build.log
          dir minhook /s /b >> logs/build.log 2>&1
          exit 1
        )
        if not exist minhook\minhook.sln (
          echo Error: minhook.sln not found in minhook >> logs/build.log
          dir minhook /s /b >> logs/build.log 2>&1
          exit 1
        )
        echo Building MinHook... >> logs/build.log
        cd minhook
        msbuild minhook.sln /p:Configuration=Release /p:Platform=x64 /v:d > build.log 2>&1
        if %ERRORLEVEL% NEQ 0 (
          echo Error: Failed to build MinHook with msbuild >> logs/build.log
          type build.log >> ../logs/build.log
          exit 1
        )
        if not exist build\VC16\Release\MinHook.x64.lib (
          echo Error: MinHook.x64.lib not found after build >> logs/build.log
          dir build /s /b >> logs/build.log 2>&1
          exit 1
        )
        copy build\VC16\Release\MinHook.x64.lib MinHook.lib
        cd ..
        echo MinHook downloaded, built, and verified >> logs/build.log
      shell: cmd
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Download and Build zlib
      run: |
        echo Downloading zlib... >> logs/build.log
        curl -L -o zlib.tar.gz https://zlib.net/zlib-1.3.1.tar.gz
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to download zlib from primary source >> logs/build.log
          exit 1
        )
        echo Extracting zlib... >> logs/build.log
        tar -xzf zlib.tar.gz
        if not exist zlib-1.3.1 (
          echo Error: zlib-1.3.1 directory not found after extraction >> logs/build.log
          dir . /s /b >> logs/build.log 2>&1
          exit 1
        )
        ren zlib-1.3.1 zlib
        cd zlib
        echo Building zlib... >> logs/build.log
        nmake -f win32/Makefile.msc
        if not exist zlib.lib (
          echo Error: zlib.lib not found after build >> logs/build.log
          dir . /s /b >> logs/build.log 2>&1
          exit 1
        )
        echo zlib built successfully >> logs/build.log
        cd ..
      shell: cmd
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Download nlohmann-json
      run: |
        echo Downloading nlohmann/json... >> logs/build.log
        curl -L -o json.zip https://github.com/nlohmann/json/archive/refs/heads/develop.zip
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to download nlohmann/json from primary source >> logs/build.log
          exit 1
        )
        echo Unzipping nlohmann/json... >> logs/build.log
        powershell -command "Expand-Archive -Path json.zip -DestinationPath temp_json -Force"
        if not exist temp_json\json-develop (
          echo Error: json-develop directory not found after unzip >> logs/build.log
          dir temp_json /s /b >> logs/build.log 2>&1
          exit 1
        )
        move temp_json\json-develop .\json-develop
        if not exist json-develop\single_include\nlohmann\json.hpp (
          echo Error: json.hpp not found in json-develop >> logs/build.log
          dir json-develop /s /b >> logs/build.log 2>&1
          exit 1
        )
        echo nlohmann/json downloaded and verified >> logs/build.log
      shell: cmd
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Build DLL
      run: |
        echo Building DLL... >> logs/build.log
        if not exist src\RustAlkadCheat2588.cpp (
          echo Error: RustAlkadCheat2588.cpp not found in src/ directory >> logs/build.log
          dir src /s /b >> logs/build.log 2>&1
          exit 1
        )
        echo RustAlkadCheat2588.cpp found >> logs/build.log
        if not exist zlib\zlib.lib (
          echo Error: zlib.lib not found in zlib/ directory >> logs/build.log
          dir zlib /s /b >> logs/build.log 2>&1
          exit 1
        )
        echo zlib.lib found >> logs/build.log
        if not exist minhook\MinHook.lib (
          echo Error: MinHook.lib not found in minhook/ directory >> logs/build.log
          dir minhook /s /b >> logs/build.log 2>&1
          exit 1
        )
        echo MinHook.lib found >> logs/build.log
        cl /std:c++17 /D UNICODE /D _UNICODE /EHsc /Zi /Fe:RustAlkadCheat.dll /LD src/RustAlkadCheat2588.cpp /I imgui /I imgui/backends /I minhook/include /I zlib /I json-develop/single_include /link /LIBPATH:zlib /LIBPATH:minhook zlib.lib MinHook.lib user32.lib d3d11.lib dxgi.lib shell32.lib ws2_32.lib Psapi.lib
        if %ERRORLEVEL% NEQ 0 (
          echo Build failed, check compiler output above >> logs/build.log
          exit 1
        )
        echo Build successful >> logs/build.log
      shell: cmd

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: BuildLogs
        path: logs/build.log

    - name: Upload DLL
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: RustAlkadCheatDLL
        path: RustAlkadCheat.dll
