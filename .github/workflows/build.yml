name: Build Rust Alkad 2588 Cheat DLL

on:
  push: # Запускаем при изменении любых файлов
  workflow_dispatch: # Ручной запуск

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      continue-on-error: true

    - name: Set up MSVC
      uses: ilammy/msvc-dev-cmd@v1
      continue-on-error: true

    - name: Create log directory
      run: |
        New-Item -ItemType Directory -Path logs -Force
        Write-Output "Log directory created" | Out-File -FilePath logs/build.log -Append
      shell: powershell

    - name: Download ImGui
      run: |
        $urls = @(
          "https://github.com/ocornut/imgui/archive/refs/heads/master.zip",
          "https://github.com/ocornut/imgui/archive/master.zip",
          "https://github.com/ocornut/imgui/archive/refs/tags/v1.90.zip",
          "https://gitlab.com/mirror/imgui/-/archive/master/imgui-master.zip",
          "https://sourceforge.net/projects/imgui/files/latest/download"
        )
        $downloaded = $false
        foreach ($url in $urls) {
          try {
            Invoke-WebRequest -Uri $url -OutFile imgui.zip
            $downloaded = $true
            Write-Output "Downloaded ImGui from $url" | Out-File -FilePath logs/build.log -Append
            break
          } catch {
            Write-Output "Failed to download ImGui from $url" | Out-File -FilePath logs/build.log -Append
          }
        }
        if (-not $downloaded) { Write-Output "Failed to download ImGui from all URLs" | Out-File -FilePath logs/build.log -Append; exit 1 }
        if (-not (Test-Path imgui.zip)) { Write-Output "ImGui zip not found after download" | Out-File -FilePath logs/build.log -Append; exit 1 }
      shell: powershell

    - name: Extract ImGui
      run: |
        if (Test-Path imgui) { Remove-Item -Path imgui -Recurse -Force }
        Expand-Archive -Path imgui.zip -DestinationPath imgui -Force
        Start-Sleep -Seconds 2
        Get-ChildItem -Path imgui -Recurse | ForEach-Object { Write-Output $_.FullName | Out-File -FilePath logs/build.log -Append }
        if (-not (Test-Path imgui/imgui-master/imgui.h)) { Write-Output "Failed to extract ImGui: imgui.h not found" | Out-File -FilePath logs/build.log -Append; exit 1 }
        Write-Output "ImGui extracted" | Out-File -FilePath logs/build.log -Append
      shell: powershell

    - name: Download MinHook
      run: |
        $urls = @(
          "https://github.com/TsudaKageyu/minhook/archive/refs/heads/master.zip",
          "https://github.com/TsudaKageyu/minhook/archive/master.zip",
          "https://github.com/TsudaKageyu/minhook/archive/refs/tags/v1.3.3.zip",
          "https://gitlab.com/mirrors/minhook/-/archive/master/minhook-master.zip",
          "https://sourceforge.net/projects/minhook/files/latest/download"
        )
        $downloaded = $false
        foreach ($url in $urls) {
          try {
            Invoke-WebRequest -Uri $url -OutFile minhook.zip
            $downloaded = $true
            Write-Output "Downloaded MinHook from $url" | Out-File -FilePath logs/build.log -Append
            break
          } catch {
            Write-Output "Failed to download MinHook from $url" | Out-File -FilePath logs/build.log -Append
          }
        }
        if (-not $downloaded) { Write-Output "Failed to download MinHook from all URLs" | Out-File -FilePath logs/build.log -Append; exit 1 }
        if (-not (Test-Path minhook.zip)) { Write-Output "MinHook zip not found after download" | Out-File -FilePath logs/build.log -Append; exit 1 }
      shell: powershell

    - name: Extract MinHook
      run: |
        if (Test-Path minhook) { Remove-Item -Path minhook -Recurse -Force }
        Expand-Archive -Path minhook.zip -DestinationPath minhook -Force
        Start-Sleep -Seconds 2
        Get-ChildItem -Path minhook -Recurse | ForEach-Object { Write-Output $_.FullName | Out-File -FilePath logs/build.log -Append }
        if (-not (Test-Path minhook/minhook-master/include/MinHook.h)) { Write-Output "Failed to extract MinHook: MinHook.h not found" | Out-File -FilePath logs/build.log -Append; exit 1 }
        Write-Output "MinHook extracted" | Out-File -FilePath logs/build.log -Append
      shell: powershell

    - name: Download zlib
      run: |
        $urls = @(
          "https://zlib.net/zlib-1.2.13.zip",
          "https://www.zlib.net/zlib1213.zip",
          "https://sourceforge.net/projects/libpng/files/zlib/1.2.13/zlib-1.2.13.zip/download",
          "https://ftp.osuosl.org/pub/blfs/conglomeration/zlib/zlib-1.2.13.tar.gz",
          "https://mirror.ibcp.fr/pub/blfs/conglomeration/zlib/zlib-1.2.13.zip"
        )
        $downloaded = $false
        foreach ($url in $urls) {
          try {
            Invoke-WebRequest -Uri $url -OutFile zlib.zip
            $downloaded = $true
            Write-Output "Downloaded zlib from $url" | Out-File -FilePath logs/build.log -Append
            break
          } catch {
            Write-Output "Failed to download zlib from $url" | Out-File -FilePath logs/build.log -Append
          }
        }
        if (-not $downloaded) { Write-Output "Failed to download zlib from all URLs" | Out-File -FilePath logs/build.log -Append; exit 1 }
        if (-not (Test-Path zlib.zip)) { Write-Output "zlib zip not found after download" | Out-File -FilePath logs/build.log -Append; exit 1 }
      shell: powershell

    - name: Extract zlib
      run: |
        if (Test-Path zlib) { Remove-Item -Path zlib -Recurse -Force }
        Expand-Archive -Path zlib.zip -DestinationPath zlib -Force
        Start-Sleep -Seconds 2
        Get-ChildItem -Path zlib -Recurse | ForEach-Object { Write-Output $_.FullName | Out-File -FilePath logs/build.log -Append }
        if (-not (Test-Path zlib/zlib-1.2.13/zlib.h)) { Write-Output "Failed to extract zlib: zlib.h not found" | Out-File -FilePath logs/build.log -Append; exit 1 }
        Write-Output "zlib extracted" | Out-File -FilePath logs/build.log -Append
      shell: powershell

    - name: Download nlohmann/json
      run: |
        $urls = @(
          "https://github.com/nlohmann/json/archive/refs/heads/develop.zip",
          "https://github.com/nlohmann/json/archive/develop.zip",
          "https://github.com/nlohmann/json/archive/refs/tags/v3.11.3.zip",
          "https://gitlab.com/mirrors/nlohmann-json/-/archive/develop/nlohmann-json-develop.zip",
          "https://github.com/nlohmann/json/releases/latest/download/json.zip"
        )
        $downloaded = $false
        foreach ($url in $urls) {
          try {
            Invoke-WebRequest -Uri $url -OutFile json.zip
            $downloaded = $true
            Write-Output "Downloaded nlohmann/json from $url" | Out-File -FilePath logs/build.log -Append
            break
          } catch {
            Write-Output "Failed to download nlohmann/json from $url" | Out-File -FilePath logs/build.log -Append
          }
        }
        if (-not $downloaded) { Write-Output "Failed to download nlohmann/json from all URLs" | Out-File -FilePath logs/build.log -Append; exit 1 }
        if (-not (Test-Path json.zip)) { Write-Output "nlohmann/json zip not found after download" | Out-File -FilePath logs/build.log -Append; exit 1 }
      shell: powershell

    - name: Extract nlohmann/json
      run: |
        if (Test-Path json) { Remove-Item -Path json -Recurse -Force }
        Expand-Archive -Path json.zip -DestinationPath json -Force
        Start-Sleep -Seconds 2
        Get-ChildItem -Path json -Recurse | ForEach-Object { Write-Output $_.FullName | Out-File -FilePath logs/build.log -Append }
        $jsonPaths = @(
          "json/json-develop/single_include/nlohmann/json.hpp",
          "json/json-3.11.3/single_include/nlohmann/json.hpp",
          "json/json-develop/include/nlohmann/json.hpp"
        )
        $found = $false
        foreach ($path in $jsonPaths) {
          if (Test-Path $path) {
            $found = $true
            Write-Output "Found nlohmann/json at $path" | Out-File -FilePath logs/build.log -Append
            break
          }
        }
        if (-not $found) {
          Write-Output "Failed to extract nlohmann/json: json.hpp not found in expected paths" | Out-File -FilePath logs/build.log -Append
          exit 1
        }
        Write-Output "nlohmann/json extracted successfully" | Out-File -FilePath logs/build.log -Append
      shell: powershell

    - name: Check RustAlkadCheat2588.cpp
      run: |
        if (-not (Test-Path RustAlkadCheat2588.cpp)) {
          Write-Output "RustAlkadCheat2588.cpp not found in repository" | Out-File -FilePath logs/build.log -Append
          exit 1
        }
        Write-Output "RustAlkadCheat2588.cpp found" | Out-File -FilePath logs/build.log -Append
      shell: powershell

    - name: Build DLL
      run: |
        Write-Output "Building DLL..." | Out-File -FilePath logs/build.log -Append
        cl /DUNICODE /D_UNICODE /MD /O2 /W4 /FeRustAlkadCheat.dll /Iimgui/imgui-master /Iminhook/minhook-master/include /Izlib/zlib-1.2.13 /Ijson/json-develop/single_include RustAlkadCheat2588.cpp /link /DLL /OUT:RustAlkadCheat.dll 2>> logs/build.log
        if (-not (Test-Path RustAlkadCheat.dll)) { Write-Output "Build failed: DLL not created" | Out-File -FilePath logs/build.log -Append; exit 1 }
        Write-Output "DLL built successfully" | Out-File -FilePath logs/build.log -Append
      shell: cmd

    - name: Upload logs
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: build-logs
        path: logs/

    - name: Upload DLL
      if: success()
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: RustAlkadCheat
        path: RustAlkadCheat.dll
