name: Build DirectX Sample DLL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15 # Prevent hanging

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Install Chocolatey (for MinGW and potential WinRAR fallback)
    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

    # Install MinGW
    - name: Install MinGW
      run: |
        choco install mingw --version 8.1.0 -y
        if ($LASTEXITCODE -ne 0) { exit 1 }
        g++ --version

    # Download WinRAR (UnRAR) with multiple mirrors and Chocolatey fallback
    - name: Download and set up WinRAR
      run: |
        $urls = @(
          "https://github.com/LIXOR333/DirectXSample/releases/download/v1.0/unrarw64.zip",
          "https://www.rarlab.com/rar/unrarw64.zip",
          "https://sourceforge.net/projects/winrar-official/files/UnRAR/unrarw64.zip/download",
          "https://archive.org/download/winrar-unrar/unrarw64.zip",
          "https://www.softpedia.com/get/Compression-tools/WinRAR.shtml",
          "https://download.cnet.com/WinRAR/3000-2250_4-10007677.html",
          "https://www.filehorse.com/download-winrar/previous-versions/",
          "https://www.oldversion.com/windows/winrar/",
          "https://github.com/winrar/winrar-mirror/releases/download/v1.0/unrarw64.zip",
          "https://www.majorgeeks.com/files/details/winrar.html",
          "https://www.fosshub.com/WinRAR.html"
        )
        $success = $false
        foreach ($url in $urls) {
          echo "Attempting to download WinRAR (UnRAR) from $url..."
          curl -L -o unrar.zip $url --retry 1 --retry-delay 2 -w "%{http_code}\n" -s
          $httpStatus = $LASTEXITCODE
          if ($httpStatus -eq 0) {
            $fileSize = (Get-Item unrar.zip).Length
            if ($fileSize -gt 100000) {
              echo "UnRAR download succeeded from $url (size: $fileSize bytes)"
              $success = $true
              break
            } else {
              echo "File too small ($fileSize bytes), trying next mirror..."
              Remove-Item -Path unrar.zip -Force -ErrorAction SilentlyContinue
            }
          } else {
            echo "Download failed with status $httpStatus, trying next mirror..."
            Remove-Item -Path unrar.zip -Force -ErrorAction SilentlyContinue
          }
        }
        if (-not $success) {
          echo "All download attempts failed, falling back to Chocolatey..."
          choco install winrar -y
          if ($LASTEXITCODE -ne 0) {
            echo "Failed to install WinRAR via Chocolatey"
            exit 1
          }
          echo "WinRAR installed via Chocolatey, using default path..."
          $env:Path += ";C:\Program Files\WinRAR"
          echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
          echo "Extracting WinRAR (UnRAR)..."
          if (Test-Path unrar.zip) {
            Expand-Archive -Path unrar.zip -DestinationPath unrar -Force
            if ($LASTEXITCODE -ne 0) {
              echo "Failed to extract unrar.zip"
              exit 1
            }
            echo "Adding UnRAR to PATH..."
            echo "Path=$env:GITHUB_WORKSPACE\unrar;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
            dir unrar\unrar.exe
          } else {
            echo "unrar.zip not found after download"
            exit 1
          }
        }

    # Download DirectX SDK with multiple mirrors
    - name: Download DirectX SDK
      run: |
        $urls = @(
          "https://github.com/LIXOR333/DirectXSample/releases/download/v1.0/DXSDK_Jun10.exe",
          "https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe",
          "https://archive.org/download/dxsdk-jun10/DXSDK_Jun10.exe",
          "https://www.softpedia.com/get/Programming/SDK-DDK/DirectX-9-0c-SDK.shtml",
          "https://www.fileplanet.com/archive/p-20341/DirectX-SDK",
          "https://www.oldversion.com/windows/directx-sdk/",
          "https://www.majorgeeks.com/files/details/microsoft_directx_sdk_june_2010.html",
          "https://download.cnet.com/DirectX-SDK/3000-2121_4-10176690.html",
          "https://www.fosshub.com/DirectX-SDK.html",
          "https://archive.org/download/microsoft-directx-sdk/DXSDK_Jun10.exe",
          "https://github.com/microsoft-archive/dxsdk/releases/download/jun10/DXSDK_Jun10.exe"
        )
        $success = $false
        foreach ($url in $urls) {
          echo "Attempting to download DirectX SDK from $url..."
          curl -L -o dxsdk.exe $url --retry 1 --retry-delay 2 -w "%{http_code}\n" -s
          $httpStatus = $LASTEXITCODE
          if ($httpStatus -eq 0) {
            $fileSize = (Get-Item dxsdk.exe).Length
            if ($fileSize -gt 500000000) {
              echo "DirectX SDK download succeeded from $url (size: $fileSize bytes)"
              $success = $true
              break
            } else {
              echo "File too small ($fileSize bytes), trying next mirror..."
              Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
            }
          } else {
            echo "Download failed with status $httpStatus, trying next mirror..."
            Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
          }
        }
        if (-not $success) {
          echo "All download attempts failed for DirectX SDK"
          exit 1
        }

    # Extract DirectX SDK using WinRAR (UnRAR)
    - name: Extract DirectX SDK
      run: |
        if (Test-Path dxsdk.exe) {
          mkdir dxsdk
          unrar x dxsdk.exe -y -idq -o+ dxsdk\
          if ($LASTEXITCODE -ne 0) {
            echo "Failed to extract dxsdk.exe with UnRAR"
            exit 1
          }
          dir dxsdk
        } else {
          echo "dxsdk.exe not found after download"
          exit 1
        }

    # Set up environment variables for DirectX SDK
    - name: Set up DirectX SDK environment
      run: |
        echo "DXSDK_DIR=$env:GITHUB_WORKSPACE\dxsdk" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "INCLUDE=$env:GITHUB_WORKSPACE\dxsdk\Include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "LIB=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "Path=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
        dir $env:GITHUB_WORKSPACE\dxsdk\Include
        dir $env:GITHUB_WORKSPACE\dxsdk\Lib\x64

    # Verify MinGW and DirectX SDK setup
    - name: Verify build environment
      run: |
        g++ --version
        dir "%DXSDK_DIR%\Include\d3d9.h"
        dir "%DXSDK_DIR%\Lib\x64\d3d9.lib"

    # Compile the DLL
    - name: Build DLL
      run: |
        g++ -shared -o DirectXSample.dll src/dllmain.cpp -I"$env:DXSDK_DIR\Include" -L"$env:DXSDK_DIR\Lib\x64" -ld3d9 -ld3dx9 -Wall -static-libgcc -static-libstdc++
        if ($LASTEXITCODE -ne 0) { exit 1 }
        dir DirectXSample.dll

    # Upload the DLL as an artifact
    - name: Upload DLL artifact
      uses: actions/upload-artifact@v4
      with:
        name: DirectXSample-DLL
        path: DirectXSample.dll
