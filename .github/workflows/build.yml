name: Build DirectX Sample DLL with Maximum Reliability

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fix Git Config
        shell: pwsh
        run: |
          echo "Configuring Git safe directory at 15:18 MSK, 18 May 2025..."
          git config --global --add safe.directory $env:GITHUB_WORKSPACE
          git config --local --unset-all http.https://github.com/.extraheader || echo "No extraheader to unset"
          git config --local --unset-all core.sshCommand || echo "No SSH config to unset"
          git submodule foreach --recursive "git config --local --unset-all http.https://github.com/.extraheader || echo 'No extraheader'; git config --local --unset-all core.sshCommand || echo 'No SSH config'"

      - name: Install Chocolatey
        shell: pwsh
        run: |
          echo "Checking for existing Chocolatey installation at 15:18 MSK, 18 May 2025..."
          $chocoExists = $false
          try {
            choco -v
            if ($LASTEXITCODE -eq 0) {
              echo "Chocolatey is already installed"
              $chocoExists = $true
            }
          } catch {
            echo "Chocolatey not found, proceeding with installation..."
          }
          if (-not $chocoExists) {
            echo "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            if ($LASTEXITCODE -ne 0) {
              echo "Chocolatey installation failed with exit code $LASTEXITCODE"
              exit 1
            }
            echo "Chocolatey installed successfully"
          }

      - name: Install MinGW
        shell: pwsh
        run: |
          echo "Installing MinGW at 15:18 MSK, 18 May 2025..."
          choco install mingw --version 8.1.0 -y
          if ($LASTEXITCODE -ne 0) {
            echo "MinGW installation failed with exit code $LASTEXITCODE"
            exit 1
          }
          $env:Path += ";C:\tools\mingw64\bin"
          echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          g++ --version
          if ($LASTEXITCODE -ne 0) {
            echo "MinGW verification failed"
            exit 1
          }
          echo "MinGW installed successfully"

      - name: Download DirectX SDK
        shell: pwsh
        run: |
          echo "Downloading DirectX SDK at 15:18 MSK, 18 May 2025..."
          $urls = @(
            "https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe",
            "https://github.com/LIXOR333/DirectXSample/releases/download/v1.0/DXSDK_Jun10.exe",
            "https://archive.org/download/dxsdk-jun10/DXSDK_Jun10.exe",
            "https://web.archive.org/web/20160330101053/https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe"
          )
          $success = $false
          $maxAttempts = 5
          foreach ($url in $urls) {
            echo "Attempting to download from $url..."
            for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
              curl -L -o dxsdk.exe $url --retry 5 --retry-delay 5
              if ($LASTEXITCODE -eq 0 -and (Test-Path dxsdk.exe)) {
                $fileSize = (Get-Item dxsdk.exe).Length
                echo "Downloaded file size: $fileSize bytes"
                if ($fileSize -gt 500000000) {
                  # Дополнительная проверка содержимого
                  $checkResult = 7z l dxsdk.exe -r 2>&1
                  if ($checkResult -match "Include" -and $checkResult -match "Lib") {
                    echo "DirectX SDK content verified, size $fileSize bytes"
                    $success = $true
                    break
                  } else {
                    echo "Downloaded file does not contain expected DirectX SDK structure, size $fileSize bytes"
                    Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
                  }
                } else {
                  echo "Downloaded file too small ($fileSize bytes), retrying attempt $attempt of $maxAttempts..."
                  Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
                }
              } else {
                echo "Download failed with exit code $LASTEXITCODE, retrying attempt $attempt of $maxAttempts..."
                Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
              }
              Start-Sleep -Seconds 5
            }
            if ($success) { break }
            echo "Failed to download from $url after $maxAttempts attempts, trying next mirror..."
          }
          if (-not $success) {
            echo "All download attempts failed for DirectX SDK after exhausting all mirrors and attempts"
            exit 1
          }

      - name: Install Archivers
        shell: pwsh
        run: |
          echo "Installing archivers at 15:18 MSK, 18 May 2025..."

          # Установка 7-Zip
          $7zipUrls = @(
            "https://www.7-zip.org/a/7z2301-x64.exe",
            "https://sourceforge.net/projects/sevenzip/files/7-Zip/23.01/7z2301-x64.exe/download",
            "https://github.com/ip7z/7zip/releases/download/23.01/7z2301-x64.exe",
            "https://web.archive.org/web/20230601000000*/https://www.7-zip.org/a/7z2301-x64.exe",
            "https://download.cnet.com/7-Zip-64-bit/3000-2250_4-10005462.html",
            "https://www.filehorse.com/download-7-zip-64/7z2301-x64.exe"
          )
          $7zipSuccess = $false
          foreach ($url in $7zipUrls) {
            echo "Attempting to download 7-Zip from $url..."
            curl -L -o 7zip.exe $url --retry 5 --retry-delay 5
            if ($LASTEXITCODE -eq 0 -and (Test-Path 7zip.exe)) {
              Start-Process -FilePath "7zip.exe" -ArgumentList "/S" -Wait -NoNewWindow
              if ($LASTEXITCODE -eq 0) {
                $env:Path += ";C:\Program Files\7-Zip"
                echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
                7z --help
                if ($LASTEXITCODE -eq 0) {
                  echo "7-Zip installed successfully"
                  $7zipSuccess = $true
                  break
                }
              }
              Remove-Item -Path 7zip.exe -Force -ErrorAction SilentlyContinue
            }
            echo "Failed to install 7-Zip from $url, trying next source..."
          }
          if (-not $7zipSuccess) {
            echo "Warning: 7-Zip installation failed, proceeding with other archivers..."
          }

          # Установка WinRAR
          $winrarUrls = @(
            "https://www.rarlab.com/rar/winrar-x64-701.exe",
            "https://www.win-rar.com/fileadmin/winrar-versions/winrar-x64-701.exe",
            "https://download.cnet.com/WinRAR-64-bit/3000-2250_4-10007677.html",
            "https://www.filehorse.com/download-winrar-64/winrar-x64-701.exe",
            "https://web.archive.org/web/20240801000000*/https://www.rarlab.com/rar/winrar-x64-701.exe",
            "https://sourceforge.net/projects/winrar/files/WinRAR/7.01/winrar-x64-701.exe/download"
          )
          $winrarSuccess = $false
          foreach ($url in $winrarUrls) {
            echo "Attempting to download WinRAR from $url..."
            curl -L -o winrar.exe $url --retry 5 --retry-delay 5
            if ($LASTEXITCODE -eq 0 -and (Test-Path winrar.exe)) {
              Start-Process -FilePath "winrar.exe" -ArgumentList "/S" -Wait -NoNewWindow
              if ($LASTEXITCODE -eq 0) {
                $env:Path += ";C:\Program Files\WinRAR"
                echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
                rar -?
                if ($LASTEXITCODE -eq 0) {
                  echo "WinRAR installed successfully"
                  $winrarSuccess = $true
                  break
                }
              }
              Remove-Item -Path winrar.exe -Force -ErrorAction SilentlyContinue
            }
            echo "Failed to install WinRAR from $url, trying next source..."
          }
          if (-not $winrarSuccess) {
            echo "Warning: WinRAR installation failed, proceeding with other archivers..."
          }

          # Установка PeaZip (альтернативный архиватор)
          $peazipUrls = @(
            "https://github.com/peazip/PeaZip/releases/download/10.0.0/peazip-10.0.0.WIN64.exe",
            "https://sourceforge.net/projects/peazip/files/10.0.0/peazip-10.0.0.WIN64.exe/download",
            "https://www.filehorse.com/download-peazip-64/peazip-10.0.0.WIN64.exe",
            "https://web.archive.org/web/20240801000000*/https://github.com/peazip/PeaZip/releases/download/10.0.0/peazip-10.0.0.WIN64.exe",
            "https://download.cnet.com/PeaZip-64-bit/3000-2250_4-10888824.html",
            "https://osdn.net/projects/peazip/storage/10.0.0/peazip-10.0.0.WIN64.exe"
          )
          $peazipSuccess = $false
          foreach ($url in $peazipUrls) {
            echo "Attempting to download PeaZip from $url..."
            curl -L -o peazip.exe $url --retry 5 --retry-delay 5
            if ($LASTEXITCODE -eq 0 -and (Test-Path peazip.exe)) {
              Start-Process -FilePath "peazip.exe" -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait -NoNewWindow
              if ($LASTEXITCODE -eq 0) {
                $env:Path += ";C:\Program Files\PeaZip"
                echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
                # Проверяем, работает ли PeaZip
                $peazipPath = "C:\Program Files\PeaZip\peazip.exe"
                if (Test-Path $peazipPath) {
                  & $peazipPath -h
                  if ($LASTEXITCODE -eq 0) {
                    echo "PeaZip installed successfully"
                    $peazipSuccess = $true
                    break
                  }
                }
              }
              Remove-Item -Path peazip.exe -Force -ErrorAction SilentlyContinue
            }
            echo "Failed to install PeaZip from $url, trying next source..."
          }
          if (-not $peazipSuccess) {
            echo "Warning: PeaZip installation failed, proceeding with other archivers..."
          }

          # Установка Bandizip (ещё один альтернативный архиватор)
          $bandizipUrls = @(
            "https://dl.bandisoft.com/bandizip/BANDIZIP-SETUP.EXE",
            "https://www.bandizip.com/dl/BANDIZIP-SETUP.EXE",
            "https://sourceforge.net/projects/bandizip/files/Bandizip/7.32/BANDIZIP-SETUP.EXE/download",
            "https://web.archive.org/web/20240801000000*/https://dl.bandisoft.com/bandizip/BANDIZIP-SETUP.EXE",
            "https://www.filehorse.com/download-bandizip/BANDIZIP-SETUP.EXE",
            "https://download.cnet.com/Bandizip/3000-2250_4-75794102.html"
          )
          $bandizipSuccess = $false
          foreach ($url in $bandizipUrls) {
            echo "Attempting to download Bandizip from $url..."
            curl -L -o bandizip.exe $url --retry 5 --retry-delay 5
            if ($LASTEXITCODE -eq 0 -and (Test-Path bandizip.exe)) {
              Start-Process -FilePath "bandizip.exe" -ArgumentList "/S" -Wait -NoNewWindow
              if ($LASTEXITCODE -eq 0) {
                $env:Path += ";C:\Program Files\Bandizip"
                echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
                # Проверяем, работает ли Bandizip
                $bandizipPath = "C:\Program Files\Bandizip\Bandizip.exe"
                if (Test-Path $bandizipPath) {
                  & $bandizipPath --help
                  if ($LASTEXITCODE -eq 0) {
                    echo "Bandizip installed successfully"
                    $bandizipSuccess = $true
                    break
                  }
                }
              }
              Remove-Item -Path bandizip.exe -Force -ErrorAction SilentlyContinue
            }
            echo "Failed to install Bandizip from $url, trying next source..."
          }
          if (-not $bandizipSuccess) {
            echo "Warning: Bandizip installation failed..."
          }

          # Проверяем, установлен ли хотя бы один архиватор
          if (-not ($7zipSuccess -or $winrarSuccess -or $peazipSuccess -or $bandizipSuccess)) {
            echo "Error: No archivers were installed successfully"
            exit 1
          }

      - name: Extract DirectX SDK
        shell: pwsh
        run: |
          echo "Extracting DirectX SDK at 15:18 MSK, 18 May 2025..."
          if (-not (Test-Path dxsdk.exe)) {
            echo "dxsdk.exe not found"
            exit 1
          }

          # Создаём папку для распаковки
          mkdir dxsdk -ErrorAction SilentlyContinue

          $extractSuccess = $false
          $maxExtractAttempts = 3

          # Проверяем содержимое dxsdk.exe
          echo "Checking contents of dxsdk.exe..."
          $checkCommand = "7z"
          if (Get-Command "7z" -ErrorAction SilentlyContinue) {
            $checkResult = 7z l dxsdk.exe -r 2>&1
            if ($LASTEXITCODE -ne 0) {
              echo "Failed to list contents of dxsdk.exe with 7-Zip, output: $checkResult"
              $checkCommand = "rar"
            }
          }
          if ($checkCommand -eq "rar" -and (Get-Command "rar" -ErrorAction SilentlyContinue)) {
            $checkResult = rar lt dxsdk.exe 2>&1
            if ($LASTEXITCODE -ne 0) {
              echo "Failed to list contents of dxsdk.exe with WinRAR, output: $checkResult"
              $checkCommand = "peazip"
            }
          }
          if ($checkCommand -eq "peazip" -and (Test-Path "C:\Program Files\PeaZip\peazip.exe")) {
            $checkResult = & "C:\Program Files\PeaZip\peazip.exe" -l dxsdk.exe 2>&1
            if ($LASTEXITCODE -ne 0) {
              echo "Failed to list contents of dxsdk.exe with PeaZip, output: $checkResult"
              $checkCommand = "bandizip"
            }
          }
          if ($checkCommand -eq "bandizip" -and (Test-Path "C:\Program Files\Bandizip\Bandizip.exe")) {
            $checkResult = & "C:\Program Files\Bandizip\Bandizip.exe" l dxsdk.exe 2>&1
            if ($LASTEXITCODE -ne 0) {
              echo "Failed to list contents of dxsdk.exe with Bandizip, output: $checkResult"
              echo "Error: Unable to check contents with any archiver"
              exit 1
            }
          }
          echo "Contents check succeeded, sample output: $checkResult"

          # Пробуем распаковать dxsdk.exe с помощью 7-Zip
          if (Get-Command "7z" -ErrorAction SilentlyContinue) {
            echo "Attempting to extract dxsdk.exe with 7-Zip..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              7z x dxsdk.exe -o"dxsdk" -y
              if ($LASTEXITCODE -eq 0) {
                echo "7-Zip extracted dxsdk.exe successfully on attempt $attempt"
                $extractSuccess = $true
                break
              } else {
                echo "7-Zip failed to extract dxsdk.exe on attempt $attempt, exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "7-Zip failed after $maxExtractAttempts attempts"
                  break
                }
                Start-Sleep -Seconds 5
              }
            }
          }

          # Если 7-Zip не сработал, пробуем WinRAR
          if (-not $extractSuccess -and (Get-Command "rar" -ErrorAction SilentlyContinue)) {
            echo "Trying WinRAR to extract dxsdk.exe..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              rar x dxsdk.exe dxsdk\ -y
              if ($LASTEXITCODE -eq 0) {
                echo "WinRAR extracted dxsdk.exe successfully on attempt $attempt"
                $extractSuccess = $true
                break
              } else {
                echo "WinRAR failed to extract dxsdk.exe on attempt $attempt, exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "WinRAR failed after $maxExtractAttempts attempts"
                  break
                }
                Start-Sleep -Seconds 5
              }
            }
          }

          # Если WinRAR не сработал, пробуем PeaZip
          if (-not $extractSuccess -and (Test-Path "C:\Program Files\PeaZip\peazip.exe")) {
            echo "Trying PeaZip to extract dxsdk.exe..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              & "C:\Program Files\PeaZip\peazip.exe" -ext2here dxsdk.exe
              if ($LASTEXITCODE -eq 0) {
                echo "PeaZip extracted dxsdk.exe successfully on attempt $attempt"
                Move-Item -Path dxsdk.exe\* -Destination dxsdk -Force -ErrorAction SilentlyContinue
                $extractSuccess = $true
                break
              } else {
                echo "PeaZip failed to extract dxsdk.exe on attempt $attempt, exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "PeaZip failed after $maxExtractAttempts attempts"
                  break
                }
                Start-Sleep -Seconds 5
              }
            }
          }

          # Если PeaZip не сработал, пробуем Bandizip
          if (-not $extractSuccess -and (Test-Path "C:\Program Files\Bandizip\Bandizip.exe")) {
            echo "Trying Bandizip to extract dxsdk.exe..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              & "C:\Program Files\Bandizip\Bandizip.exe" x dxsdk.exe -o dxsdk
              if ($LASTEXITCODE -eq 0) {
                echo "Bandizip extracted dxsdk.exe successfully on attempt $attempt"
                $extractSuccess = $true
                break
              } else {
                echo "Bandizip failed to extract dxsdk.exe on attempt $attempt, exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "Bandizip failed after $maxExtractAttempts attempts"
                  break
                }
                Start-Sleep -Seconds 5
              }
            }
          }

          # Проверяем, удалось ли распаковать
          if (-not $extractSuccess) {
            echo "Error: Failed to extract dxsdk.exe with all available archivers"
            exit 1
          }

          # Логируем файлы после первой распаковки
          echo "Listing all files in dxsdk folder after initial extraction:"
          Get-ChildItem -Path dxsdk -Recurse | ForEach-Object { echo "$($_.FullName) ($($_.Length) bytes)" }

          # Ищем большой файл (CAB или другой архив)
          echo "Searching for potential large files (>300MB)..."
          $largeFile = Get-ChildItem -Path dxsdk -Recurse -File | Where-Object { $_.Length -gt 300000000 } | Select-Object -First 1
          if ($largeFile) {
            echo "Found large file: $($largeFile.FullName), size: $($largeFile.Length) bytes"
            Move-Item -Path $largeFile.FullName -Destination "dxsdk\dxsdk.cab" -Force
          } else {
            echo "No large file found with size > 300MB. Trying alternative extraction method..."
            $potentialCabs = Get-ChildItem -Path dxsdk -Recurse -File | Where-Object { $_.Extension -match "\.cab|\.msi|\.zip" -and $_.Length -gt 100000000 } | Select-Object -First 1
            if ($potentialCabs) {
              echo "Found potential CAB file: $($potentialCabs.FullName), size: $($potentialCabs.Length) bytes"
              Move-Item -Path $potentialCabs.FullName -Destination "dxsdk\dxsdk.cab" -Force
            } else {
              echo "No CAB or similar archive found in dxsdk folder"
              Get-ChildItem -Path dxsdk -Recurse -File | ForEach-Object { echo "File: $($_.FullName), Size: $($_.Length) bytes" }
              exit 1
            }
          }

          # Распаковываем CAB-файл с помощью доступных архиваторов
          $cabExtractSuccess = $false

          if (Get-Command "7z" -ErrorAction SilentlyContinue) {
            echo "Extracting dxsdk.cab with 7-Zip..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              7z x dxsdk\dxsdk.cab -o"dxsdk\extracted" -y
              if ($LASTEXITCODE -eq 0) {
                echo "7-Zip extracted dxsdk.cab successfully on attempt $attempt"
                $cabExtractSuccess = $true
                break
              } else {
                echo "7-Zip failed to extract dxsdk.cab on attempt $attempt, exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "7-Zip failed after $maxExtractAttempts attempts"
                  break
                }
                Start-Sleep -Seconds 5
              }
            }
          }

          if (-not $cabExtractSuccess -and (Get-Command "rar" -ErrorAction SilentlyContinue)) {
            echo "Trying WinRAR to extract dxsdk.cab..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              rar x dxsdk\dxsdk.cab dxsdk\extracted\ -y
              if ($LASTEXITCODE -eq 0) {
                echo "WinRAR extracted dxsdk.cab successfully on attempt $attempt"
                $cabExtractSuccess = $true
                break
              } else {
                echo "WinRAR failed to extract dxsdk.cab on attempt $attempt, exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "WinRAR failed after $maxExtractAttempts attempts"
                  break
                }
                Start-Sleep -Seconds 5
              }
            }
          }

          if (-not $cabExtractSuccess -and (Test-Path "C:\Program Files\PeaZip\peazip.exe")) {
            echo "Trying PeaZip to extract dxsdk.cab..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              & "C:\Program Files\PeaZip\peazip.exe" -ext2here dxsdk\dxsdk.cab
              if ($LASTEXITCODE -eq 0) {
                echo "PeaZip extracted dxsdk.cab successfully on attempt $attempt"
                Move-Item -Path dxsdk\dxsdk.cab\* -Destination dxsdk\extracted -Force -ErrorAction SilentlyContinue
                $cabExtractSuccess = $true
                break
              } else {
                echo "PeaZip failed to extract dxsdk.cab on attempt $attempt, exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "PeaZip failed after $maxExtractAttempts attempts"
                  break
                }
                Start-Sleep -Seconds 5
              }
            }
          }

          if (-not $cabExtractSuccess -and (Test-Path "C:\Program Files\Bandizip\Bandizip.exe")) {
            echo "Trying Bandizip to extract dxsdk.cab..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              & "C:\Program Files\Bandizip\Bandizip.exe" x dxsdk\dxsdk.cab -o dxsdk\extracted
              if ($LASTEXITCODE -eq 0) {
                echo "Bandizip extracted dxsdk.cab successfully on attempt $attempt"
                $cabExtractSuccess = $true
                break
              } else {
                echo "Bandizip failed to extract dxsdk.cab on attempt $attempt, exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "Bandizip failed after $maxExtractAttempts attempts"
                  break
                }
                Start-Sleep -Seconds 5
              }
            }
          }

          if (-not $cabExtractSuccess) {
            echo "Error: Failed to extract dxsdk.cab with all available archivers"
            exit 1
          }

          # Перемещаем файлы из extracted в dxsdk
          echo "Moving extracted files to dxsdk folder..."
          Move-Item -Path dxsdk\extracted\* -Destination dxsdk -Force -ErrorAction SilentlyContinue
          Remove-Item -Path dxsdk\extracted -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path dxsdk\dxsdk.cab -Force -ErrorAction SilentlyContinue

          # Проверяем наличие папки Include
          echo "Listing files in dxsdk folder after CAB extraction:"
          Get-ChildItem -Path dxsdk -Recurse | ForEach-Object { echo "$($_.FullName) ($($_.Length) bytes)" }
          if (Test-Path dxsdk\Include) {
            echo "DirectX SDK extracted successfully, Include folder found!"
          } else {
            echo "Include folder not found after extraction. Attempting alternative extraction..."
            echo "Running dxsdk.exe as installer..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              Start-Process -FilePath "dxsdk.exe" -ArgumentList "/S /D=dxsdk_install" -Wait -NoNewWindow
              if ($LASTEXITCODE -eq 0 -and (Test-Path dxsdk_install)) {
                echo "Installer ran successfully on attempt $attempt, moving files to dxsdk..."
                Move-Item -Path dxsdk_install\* -Destination dxsdk -Force -ErrorAction SilentlyContinue
                Remove-Item -Path dxsdk_install -Recurse -Force -ErrorAction SilentlyContinue
                if (Test-Path dxsdk\Include) {
                  echo "DirectX SDK extracted successfully via installer on attempt $attempt!"
                  break
                } else {
                  echo "Include folder still not found after installer on attempt $attempt, retrying..."
                  if ($attempt -eq $maxExtractAttempts) {
                    echo "Installer failed to create Include folder after $maxExtractAttempts attempts"
                    exit 1
                  }
                  Start-Sleep -Seconds 5
                }
              } else {
                echo "Installer failed on attempt $attempt with exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "Installer failed after $maxExtractAttempts attempts"
                  exit 1
                }
                Start-Sleep -Seconds 5
              }
            }
          }

      - name: Set up DirectX SDK environment
        shell: pwsh
        run: |
          echo "Setting up DirectX SDK environment at 15:18 MSK, 18 May 2025..."
          echo "DXSDK_DIR=$env:GITHUB_WORKSPACE\dxsdk" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "INCLUDE=$env:GITHUB_WORKSPACE\dxsdk\Include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "LIB=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Path=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;C:\tools\mingw64\bin;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include")) {
            echo "Include folder not found"
            exit 1
          }
          echo "Environment variables set successfully"

      - name: Build DirectXSample DLL
        shell: pwsh
        run: |
          echo "Compiling DirectXSample DLL at 15:18 MSK, 18 May 2025..."
          g++ -shared -o DirectXSample.dll src/dllmain.cpp -I"$env:DXSDK_DIR\Include" -L"$env:DXSDK_DIR\Lib\x64" -ld3d9 -ld3dx9 -Wall -static-libgcc -static-libstdc++ -O2
          if ($LASTEXITCODE -ne 0) {
            echo "DirectXSample DLL compilation failed with exit code $LASTEXITCODE"
            exit 1
          }
          if (-not (Test-Path DirectXSample.dll)) {
            echo "DirectXSample.dll not created"
            exit 1
          }
          echo "DirectXSample DLL compilation completed"

      - name: Upload DLL artifact
        uses: actions/upload-artifact@v4
        with:
          name: DirectXSample-DLL
          path: DirectXSample.dll
