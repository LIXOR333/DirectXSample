name: Build DirectX Sample DLL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      run: echo "Checkout completed"

    - name: Install Chocolatey
      shell: pwsh
      run: |
        echo "Starting Chocolatey installation..."
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        if ($LASTEXITCODE -ne 0) {
          echo "Chocolatey installation failed, retrying with curl..."
          curl -L https://chocolatey.org/install.ps1 -o install.ps1
          iex (Get-Content install.ps1 -Raw)
        }
        if ($LASTEXITCODE -ne 0) { exit 1 }
        echo "Chocolatey installed successfully"

    - name: Install MinGW
      shell: pwsh
      run: |
        echo "Starting MinGW installation..."
        choco install mingw -y
        if ($LASTEXITCODE -ne 0) { exit 1 }
        $env:Path += ";C:\tools\mingw64\bin"
        echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
        g++ --version
        echo "MinGW installed successfully"

    - name: Download and set up IZArc
      shell: pwsh
      run: |
        echo "Starting IZArc setup..."
        $urls = @(
          "https://www.izarc.org/download/IZArc2_70.exe",
          "https://www.majorgeeks.com/files/details/izarc.html",
          "https://www.softpedia.com/get/Compression-tools/IZArc.shtml"
        )
        $success = $false
        foreach ($url in $urls) {
          echo "Attempting to download IZArc from $url..."
          curl -L -o izarc.exe $url --retry 3 --retry-delay 2 -w "%{http_code}\n" -s
          if ($LASTEXITCODE -eq 0) {
            $fileSize = (Get-Item izarc.exe -ErrorAction SilentlyContinue).Length
            if ($fileSize -gt 3000000) {
              echo "IZArc download succeeded from $url (size: $fileSize bytes)"
              $success = $true
              break
            } else {
              Remove-Item -Path izarc.exe -Force -ErrorAction SilentlyContinue
            }
          } else {
            Remove-Item -Path izarc.exe -Force -ErrorAction SilentlyContinue
          }
        }
        if (-not $success) { exit 1 }
        echo "Installing IZArc silently..."
        Start-Process -FilePath izarc.exe -ArgumentList "/S" -Wait -NoNewWindow -PassThru | ForEach-Object {
          $process = $_
          $timeout = 60
          $process.WaitForExit($timeout * 1000)
          if ($process.ExitCode -eq 0) {
            echo "IZArc installed successfully"
            $env:Path += ";C:\Program Files\IZArc"
            echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "ARCHIVER=IZArc" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            echo "IZArc installation failed, exit code: $($process.ExitCode)"
            exit 1
          }
        }
        echo "IZArc setup completed"

    - name: Download DirectX SDK
      shell: pwsh
      run: |
        echo "Starting DirectX SDK download..."
        $urls = @(
          "https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe",
          "https://github.com/LIXOR333/DirectXSample/releases/download/v1.0/DXSDK_Jun10.exe",
          "https://archive.org/download/dxsdk-jun10/DXSDK_Jun10.exe"
        )
        $success = $false
        foreach ($url in $urls) {
          echo "Attempting to download DirectX SDK from $url..."
          curl -L -o dxsdk.exe $url --retry 5 --retry-delay 5 -w "%{http_code}\n" -s
          if ($LASTEXITCODE -eq 0) {
            $fileSize = (Get-Item dxsdk.exe -ErrorAction SilentlyContinue).Length
            if ($fileSize -gt 500000000) {
              echo "DirectX SDK download succeeded from $url (size: $fileSize bytes)"
              $success = $true
              break
            } else {
              Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
            }
          } else {
            Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
          }
        }
        if (-not $success) { exit 1 }
        echo "DirectX SDK download completed"

    - name: Extract DirectX SDK using IZArc
      shell: pwsh
      run: |
        echo "Starting DirectX SDK extraction..."
        if (Test-Path dxsdk.exe) {
          mkdir dxsdk
          echo "Attempting to extract DirectX SDK with IZArc..."
          Start-Process -FilePath "C:\Program Files\IZArc\IZArc.exe" -ArgumentList "-e dxsdk.exe -o:dxsdk -y" -Wait -NoNewWindow -PassThru | ForEach-Object {
            $process = $_
            $timeout = 180
            $process.WaitForExit($timeout * 1000)
            if ($process.ExitCode -eq 0) {
              if (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include") {
                echo "Extraction succeeded, Include folder found"
              } else {
                echo "Extraction succeeded, but Include folder not found"
                exit 1
              }
            } else {
              echo "Extraction failed with exit code: $($process.ExitCode)"
              exit 1
            }
          }
          dir dxsdk
          echo "DirectX SDK extraction completed"
        } else {
          echo "dxsdk.exe not found"
          exit 1
        }

    - name: Set up DirectX SDK environment
      shell: pwsh
      run: |
        echo "Setting up environment variables..."
        if (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include") {
          echo "DXSDK_DIR=$env:GITHUB_WORKSPACE\dxsdk" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "INCLUDE=$env:GITHUB_WORKSPACE\dxsdk\Include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "LIB=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Path=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Environment variables set successfully"
        } else {
          echo "DirectX SDK Include folder not found"
          exit 1
        }

    - name: Verify build environment
      shell: pwsh
      run: |
        echo "Verifying build environment..."
        g++ --version
        if (-not (Test-Path "$env:DXSDK_DIR\Include\d3d9.h")) { exit 1 }
        if (-not (Test-Path "$env:DXSDK_DIR\Lib\x64\d3d9.lib")) { exit 1 }
        echo "Build environment verified"

    - name: Build DLL
      shell: pwsh
      run: |
        echo "Compiling DLL..."
        if (-not (Test-Path src/dllmain.cpp)) {
          echo "dllmain.cpp not found in src directory"
          exit 1
        }
        g++ -shared -o DirectXSample.dll src/dllmain.cpp -I"$env:DXSDK_DIR\Include" -L"$env:DXSDK_DIR\Lib\x64" -ld3d9 -ld3dx9 -Wall -static-libgcc -static-libstdc++
        if ($LASTEXITCODE -ne 0) { exit 1 }
        dir DirectXSample.dll
        echo "DLL compilation completed"

    - name: Upload DLL artifact
      uses: actions/upload-artifact@v4
      with:
        name: DirectXSample-DLL
        path: DirectXSample.dll
