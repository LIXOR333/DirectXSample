name: Build DirectX Sample DLL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15 # Prevent hanging

    steps:
    # Step 1: Checkout the repository
    - name: Step 1 - Checkout code
      uses: actions/checkout@v3
      run: |
        echo "Step 1: Checkout completed"

    # Step 2: Install Chocolatey
    - name: Step 2 - Install Chocolatey
      shell: pwsh
      run: |
        echo "Step 2: Starting Chocolatey installation..."
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        if ($LASTEXITCODE -ne 0) {
          echo "Step 2: Chocolatey installation failed with exit code $LASTEXITCODE"
          exit 1
        }
        echo "Step 2: Chocolatey installed successfully"

    # Step 3: Install MinGW
    - name: Step 3 - Install MinGW
      shell: pwsh
      run: |
        echo "Step 3: Starting MinGW installation..."
        choco install mingw --version 8.1.0 -y
        if ($LASTEXITCODE -ne 0) {
          echo "Step 3: MinGW installation failed with exit code $LASTEXITCODE"
          exit 1
        }
        g++ --version
        echo "Step 3: MinGW installed successfully"

    # Step 4: Download and set up archivers
    - name: Step 4 - Download and set up archivers
      shell: pwsh
      run: |
        echo "Step 4: Starting archiver setup..."
        $archiver = ""
        
        # Try PeaZip
        $urls = @(
          "https://github.com/peazip/PeaZip/releases/download/9.8.0/peazip_portable-9.8.0.WIN64.zip",
          "https://sourceforge.net/projects/peazip/files/9.8.0/peazip_portable-9.8.0.WIN64.zip/download",
          "https://www.softpedia.com/get/Compression-tools/PeaZip.shtml",
          "https://www.majorgeeks.com/files/details/peazip.html",
          "https://www.filehorse.com/download-peazip/64/",
          "https://peazip.github.io/peazip_portable-9.8.0.WIN64.zip"
        )
        $success = $false
        foreach ($url in $urls) {
          echo "Step 4: Attempting to download PeaZip from $url..."
          curl -L -o archiver.zip $url --retry 1 --retry-delay 2 -w "%{http_code}\n" -s
          $httpStatus = $LASTEXITCODE
          if ($httpStatus -eq 0) {
            $fileSize = (Get-Item archiver.zip -ErrorAction SilentlyContinue).Length
            if ($fileSize -gt 10000000) {
              echo "Step 4: PeaZip download succeeded from $url (size: $fileSize bytes)"
              $success = $true
              $archiver = "PeaZip"
              break
            } else {
              echo "Step 4: File too small ($fileSize bytes), trying next mirror..."
              Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
            }
          } else {
            echo "Step 4: Download failed with status $httpStatus, trying next mirror..."
            Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
          }
        }

        # If PeaZip failed, try Bandizip
        if (-not $success) {
          $urls = @(
            "https://www.bandisoft.com/bandizip/dl.php?portable",
            "https://sourceforge.net/projects/bandizip/files/bandizip_portable_7.32.zip/download",
            "https://www.softpedia.com/get/Compression-tools/Bandizip.shtml",
            "https://www.filehorse.com/download-bandizip/64/",
            "https://en.bandisoft.com/bandizip/dl.php?portable",
            "https://www.majorgeeks.com/files/details/bandizip.html"
          )
          foreach ($url in $urls) {
            echo "Step 4: Attempting to download Bandizip from $url..."
            curl -L -o archiver.zip $url --retry 1 --retry-delay 2 -w "%{http_code}\n" -s
            $httpStatus = $LASTEXITCODE
            if ($httpStatus -eq 0) {
              $fileSize = (Get-Item archiver.zip -ErrorAction SilentlyContinue).Length
              if ($fileSize -gt 5000000) {
                echo "Step 4: Bandizip download succeeded from $url (size: $fileSize bytes)"
                $success = $true
                $archiver = "Bandizip"
                break
              } else {
                echo "Step 4: File too small ($fileSize bytes), trying next mirror..."
                Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
              }
            } else {
              echo "Step 4: Download failed with status $httpStatus, trying next mirror..."
              Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
            }
          }
        }

        # If Bandizip failed, fallback to Chocolatey (WinZip or 7-Zip)
        if (-not $success) {
          echo "Step 4: All download attempts failed, falling back to Chocolatey..."
          choco install 7zip -y
          if ($LASTEXITCODE -eq 0) {
            echo "Step 4: 7-Zip installed via Chocolatey, using default path..."
            $env:Path += ";C:\Program Files\7-Zip"
            echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
            $archiver = "7-Zip"
            $success = $true
          } else {
            choco install winzip -y
            if ($LASTEXITCODE -ne 0) {
              echo "Step 4: Failed to install WinZip or 7-Zip via Chocolatey"
              exit 1
            }
            echo "Step 4: WinZip installed via Chocolatey, using default path..."
            $env:Path += ";C:\Program Files\WinZip"
            echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
            $archiver = "WinZip"
            $success = $true
          }
        }

        # Extract the downloaded archiver (PeaZip or Bandizip)
        if ($archiver -eq "PeaZip" -or $archiver -eq "Bandizip") {
          echo "Step 4: Extracting $archiver..."
          if (Test-Path archiver.zip) {
            Expand-Archive -Path archiver.zip -DestinationPath archiver -Force
            if ($LASTEXITCODE -eq 0) {
              if ($archiver -eq "PeaZip") {
                echo "Step 4: Adding PeaZip to PATH..."
                echo "Path=$env:GITHUB_WORKSPACE\archiver\peazip_portable-9.8.0.WIN64;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
                dir archiver\peazip_portable-9.8.0.WIN64\peazip.exe
              } elseif ($archiver -eq "Bandizip") {
                echo "Step 4: Adding Bandizip to PATH..."
                echo "Path=$env:GITHUB_WORKSPACE\archiver;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
                dir archiver\bzip.exe
              }
            } else {
              echo "Step 4: Failed to extract archiver.zip - possibly not a valid archive"
              Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
            }
          } else {
            echo "Step 4: archiver.zip not found after download"
            Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
          }
        }

        # Save the archiver type for later steps
        echo "ARCHIVER=$archiver" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "Step 4: Archiver setup completed: $archiver"

    # Step 5: Download DirectX SDK
    - name: Step 5 - Download DirectX SDK
      shell: pwsh
      run: |
        echo "Step 5: Starting DirectX SDK download..."
        $urls = @(
          "https://github.com/LIXOR333/DirectXSample/releases/download/v1.0/DXSDK_Jun10.exe",
          "https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe",
          "https://archive.org/download/dxsdk-jun10/DXSDK_Jun10.exe",
          "https://archive.org/download/microsoft-directx-sdk/DXSDK_Jun10.exe",
          "https://www.majorgeeks.com/files/details/directx_sdk_june_2010.html",
          "https://www.softpedia.com/get/Programming/SDK-DDK/DirectX-SDK-June-2010.shtml",
          "https://archive.org/details/dxsdk_jun10",
          "https://archive.org/details/microsoft_directx_sdk_june_2010"
        )
        $success = $false
        foreach ($url in $urls) {
          echo "Step 5: Attempting to download DirectX SDK from $url..."
          curl -L -o dxsdk.exe $url --retry 3 --retry-delay 2 -w "%{http_code}\n" -s
          $httpStatus = $LASTEXITCODE
          if ($httpStatus -eq 0) {
            $fileSize = (Get-Item dxsdk.exe -ErrorAction SilentlyContinue).Length
            if ($fileSize -gt 500000000) {
              echo "Step 5: DirectX SDK download succeeded from $url (size: $fileSize bytes)"
              $success = $true
              break
            } else {
              echo "Step 5: File too small ($fileSize bytes), trying next mirror..."
              Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
            }
          } else {
            echo "Step 5: Download failed with status $httpStatus, trying next mirror..."
            Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
          }
        }
        if (-not $success) {
          echo "Step 5: All download attempts failed for DirectX SDK"
          exit 1
        }
        echo "Step 5: DirectX SDK download completed"

    # Step 6: Extract DirectX SDK
    - name: Step 6 - Extract DirectX SDK
      shell: pwsh
      run: |
        echo "Step 6: Starting DirectX SDK extraction..."
        if (Test-Path dxsdk.exe) {
          mkdir dxsdk
          $extractSuccess = $false
          
          # Try PeaZip
          if ($env:ARCHIVER -eq "PeaZip") {
            echo "Step 6: Attempting to extract DirectX SDK (dxsdk.exe) with PeaZip..."
            Start-Process -FilePath peazip.exe -ArgumentList "-ext2here dxsdk.exe" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  Move-Item -Path dxsdk.exe\* -Destination dxsdk -Force -ErrorAction SilentlyContinue
                  if (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include") {
                    $extractSuccess = $true
                    echo "Step 6: PeaZip extraction succeeded, Include folder found"
                  } else {
                    echo "Step 6: PeaZip extraction succeeded, but Include folder not found"
                  }
                } else {
                  echo "Step 6: Failed to extract DirectX SDK with PeaZip, exit code: $($process.ExitCode), skipping to next method..."
                }
              } else {
                echo "Step 6: PeaZip extraction timed out after $timeout seconds, skipping to next method..."
                $process.Kill()
              }
            }
          }
          
          # Try Bandizip if previous failed
          if (-not $extractSuccess -and $env:ARCHIVER -eq "Bandizip") {
            echo "Step 6: Attempting to extract DirectX SDK (dxsdk.exe) with Bandizip..."
            Start-Process -FilePath bzip.exe -ArgumentList "x dxsdk.exe -o:dxsdk" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  if (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include") {
                    $extractSuccess = $true
                    echo "Step 6: Bandizip extraction succeeded, Include folder found"
                  } else {
                    echo "Step 6: Bandizip extraction succeeded, but Include folder not found"
                  }
                } else {
                  echo "Step 6: Failed to extract DirectX SDK with Bandizip, exit code: $($process.ExitCode), skipping to next method..."
                }
              } else {
                echo "Step 6: Bandizip extraction timed out after $timeout seconds, skipping to next method..."
                $process.Kill()
              }
            }
          }
          
          # Try WinZip if previous failed
          if (-not $extractSuccess -and $env:ARCHIVER -eq "WinZip") {
            echo "Step 6: Attempting to extract DirectX SDK (dxsdk.exe) with WinZip..."
            Start-Process -FilePath winzip.exe -ArgumentList "-e dxsdk.exe dxsdk" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  if (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include") {
                    $extractSuccess = $true
                    echo "Step 6: WinZip extraction succeeded, Include folder found"
                  } else {
                    echo "Step 6: WinZip extraction succeeded, but Include folder not found"
                  }
                } else {
                  echo "Step 6: Failed to extract DirectX SDK with WinZip, exit code: $($process.ExitCode), skipping to next method..."
                }
              } else {
                echo "Step 6: WinZip extraction timed out after $timeout seconds, skipping to next method..."
                $process.Kill()
              }
            }
          }
          
          # Try 7-Zip if previous failed
          if (-not $extractSuccess -and $env:ARCHIVER -eq "7-Zip") {
            echo "Step 6: Attempting to extract DirectX SDK (dxsdk.exe) with 7-Zip..."
            Start-Process -FilePath 7z.exe -ArgumentList "x dxsdk.exe -o:dxsdk" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  if (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include") {
                    $extractSuccess = $true
                    echo "Step 6: 7-Zip extraction succeeded, Include folder found"
                  } else {
                    echo "Step 6: 7-Zip extraction succeeded, but Include folder not found"
                  }
                } else {
                  echo "Step 6: Failed to extract DirectX SDK with 7-Zip, exit code: $($process.ExitCode)"
                }
              } else {
                echo "Step 6: 7-Zip extraction timed out after $timeout seconds"
                $process.Kill()
                exit 1
              }
            }
          }
          
          if ($extractSuccess) {
            dir dxsdk
            echo "Step 6: DirectX SDK extraction completed successfully"
          } else {
            echo "Step 6: All attempts to extract DirectX SDK (dxsdk.exe) failed"
            exit 1
          }
        } else {
          echo "Step 6: dxsdk.exe not found after download"
          exit 1
        }

    # Step 7: Set up environment variables
    - name: Step 7 - Set up DirectX SDK environment
      shell: pwsh
      run: |
        echo "Step 7: Setting up environment variables..."
        if (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include") {
          echo "DXSDK_DIR=$env:GITHUB_WORKSPACE\dxsdk" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "INCLUDE=$env:GITHUB_WORKSPACE\dxsdk\Include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "LIB=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Path=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          dir $env:GITHUB_WORKSPACE\dxsdk\Include
          dir $env:GITHUB_WORKSPACE\dxsdk\Lib\x64
          echo "Step 7: Environment variables set successfully"
        } else {
          echo "Step 7: DirectX SDK Include folder not found, setup failed"
          exit 1
        }

    # Step 8: Verify build environment
    - name: Step 8 - Verify build environment
      shell: pwsh
      run: |
        echo "Step 8: Verifying build environment..."
        g++ --version
        dir "%DXSDK_DIR%\Include\d3d9.h"
        dir "%DXSDK_DIR%\Lib\x64\d3d9.lib"
        echo "Step 8: Build environment verified"

    # Step 9: Compile the DLL
    - name: Step 9 - Build DLL
      shell: pwsh
      run: |
        echo "Step 9: Compiling DLL..."
        g++ -shared -o DirectXSample.dll src/dllmain.cpp -I"$env:DXSDK_DIR\Include" -L"$env:DXSDK_DIR\Lib\x64" -ld3d9 -ld3dx9 -Wall -static-libgcc -static-libstdc++
        if ($LASTEXITCODE -ne 0) {
          echo "Step 9: DLL compilation failed with exit code $LASTEXITCODE"
          exit 1
        }
        dir DirectXSample.dll
        echo "Step 9: DLL compilation completed"

    # Step 10: Upload the DLL as an artifact
    - name: Step 10 - Upload DLL artifact
      uses: actions/upload-artifact@v4
      with:
        name: DirectXSample-DLL
        path: DirectXSample.dll
      run: |
        echo "Step 10: Artifact upload completed"
