name: Build DirectX Sample DLL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Полный клон, чтобы не было косяков

      - name: Fix Git Config
        shell: pwsh
        run: |
          echo "Чистим Git от всякого хлама..."
          git config --global --add safe.directory $env:GITHUB_WORKSPACE
          git config --local --unset-all http.https://github.com/.extraheader || echo "Чисто!"
          git config --local --unset-all core.sshCommand || echo "SSH тоже чист!"
          git submodule foreach --recursive "git config --local --unset-all http.https://github.com/.extraheader || echo 'Чисто'; git config --local --unset-all core.sshCommand || echo 'SSH чист'"

      - name: Install Chocolatey
        shell: pwsh
        run: |
          echo "Кидаем Chocolatey, чтобы всё было по кайфу..."
          $chocoExists = $false
          try {
            choco -v
            if ($LASTEXITCODE -eq 0) {
              echo "Chocolatey уже стоит, красота!"
              $chocoExists = $true
            }
          } catch {
            echo "Chocolatey нет, ща закинем..."
          }
          if (-not $chocoExists) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            if ($LASTEXITCODE -ne 0) {
              echo "Chocolatey не встал, пипец, ошибка $LASTEXITCODE"
              exit 1
            }
            echo "Chocolatey готов жарить!"
          }

      - name: Install MinGW
        shell: pwsh
        run: |
          echo "Ставим MinGW, чтобы компилить как босс..."
          choco install mingw --version 8.1.0 -y
          if ($LASTEXITCODE -ne 0) {
            echo "MinGW не встал, ошибка $LASTEXITCODE"
            exit 1
          }
          $env:Path += ";C:\tools\mingw64\bin"
          echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          g++ --version
          if ($LASTEXITCODE -ne 0) {
            echo "g++ где-то потерялся, беда!"
            exit 1
          }
          echo "MinGW на месте, погнали дальше!"

      - name: Download DirectX SDK
        shell: pwsh
        run: |
          echo "Качаем DirectX SDK, держись..."
          $url = "https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe"
          echo "Грузим с $url..."
          curl -L -o dxsdk.exe $url --retry 5 --retry-delay 5
          if ($LASTEXITCODE -eq 0 -and (Test-Path dxsdk.exe)) {
            $fileSize = (Get-Item dxsdk.exe).Length
            if ($fileSize -gt 500000000) {
              echo "SDK скачан, размер $fileSize байт, всё чётко!"
            } else {
              echo "Файл мелкий, $fileSize байт, не катит!"
              exit 1
            }
          } else {
            echo "Не скачалось, ошибка $LASTEXITCODE, пичаль..."
            exit 1
          }

      - name: Extract DirectX SDK
        shell: pwsh
        run: |
          echo "Распаковываем DirectX SDK..."
          if (-not (Test-Path dxsdk.exe)) {
            echo "Где dxsdk.exe? Потерялся!"
            exit 1
          }
          choco install 7zip -y --no-progress
          $env:Path += ";C:\Program Files\7-Zip"
          echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          mkdir dxsdk -ErrorAction SilentlyContinue
          echo "Распаковываем dxsdk.exe в dxsdk..."
          7z x dxsdk.exe -o"dxsdk" -y
          if ($LASTEXITCODE -ne 0) {
            echo "7-Zip облажался на dxsdk.exe, ошибка $LASTEXITCODE"
            exit 1
          }
          echo "Что у нас в dxsdk после первой распаковки:"
          Get-ChildItem -Path dxsdk -Recurse | ForEach-Object { echo "$($_.FullName) ($($_.Length) байт)" }
          echo "Ищем CAB или что-то похожее..."
          $cabFile = Get-ChildItem -Path dxsdk -Recurse -File | Where-Object { $_.Length -gt 300000000 } | Select-Object -First 1
          if ($cabFile) {
            echo "Нашёл файл: $($cabFile.FullName), размер: $($cabFile.Length) байт"
            Move-Item -Path $cabFile.FullName -Destination "dxsdk\dxsdk.cab" -Force
            echo "Распаковываем dxsdk.cab..."
            7z x dxsdk\dxsdk.cab -o"dxsdk\extracted" -y
            if ($LASTEXITCODE -ne 0) {
              echo "CAB не распаковался, ошибка $LASTEXITCODE"
              exit 1
            }
            echo "Перекидываем файлы из extracted в dxsdk..."
            Move-Item -Path dxsdk\extracted\* -Destination dxsdk -Force -ErrorAction SilentlyContinue
            Remove-Item -Path dxsdk\extracted -Recurse -Force -ErrorAction SilentlyContinue
            Remove-Item -Path dxsdk\dxsdk.cab -Force -ErrorAction SilentlyContinue
            echo "Что у нас в dxsdk после распаковки CAB:"
            Get-ChildItem -Path dxsdk -Recurse | ForEach-Object { echo "$($_.FullName) ($($_.Length) байт)" }
            if (Test-Path dxsdk\Include) {
              echo "Всё разложено, Include на месте, погнали!"
            } else {
              echo "Где папка Include? Косяк!"
              exit 1
            }
          } else {
            echo "Не нашёл CAB или что-то похожее с размером > 300MB!"
            Get-ChildItem -Path dxsdk -Recurse -File | ForEach-Object { echo "Файл: $($_.FullName), Размер: $($_.Length) байт" }
            exit 1
          }

      - name: Set up DirectX SDK environment
        shell: pwsh
        run: |
          echo "Настраиваем среду для DirectX..."
          echo "DXSDK_DIR=$env:GITHUB_WORKSPACE\dxsdk" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "INCLUDE=$env:GITHUB_WORKSPACE\dxsdk\Include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "LIB=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Path=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;C:\tools\mingw64\bin;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include")) {
            echo "Include-папка не найдена, пипец!"
            exit 1
          }
          echo "Среда готова, можно компилить!"

      - name: Build DLL
        shell: pwsh
        run: |
          echo "Компилим твой чит..."
          g++ -shared -o DirectXSample.dll src/dllmain.cpp -I"$env:DXSDK_DIR\Include" -L"$env:DXSDK_DIR\Lib\x64" -ld3d9 -ld3dx9 -Wall -static-libgcc -static-libstdc++ -O2
          if ($LASTEXITCODE -ne 0) {
            echo "Компиляция накрылась, ошибка $LASTEXITCODE"
            exit 1
          }
          if (-not (Test-Path DirectXSample.dll)) {
            echo "DLL не появилась, где она?!"
            exit 1
          }
          echo "DLL готова, ты гений!"

      - name: Upload DLL artifact
        uses: actions/upload-artifact@v4
        with:
          name: DirectXSample-DLL
          path: DirectXSample.dll
