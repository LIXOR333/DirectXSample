name: Build DirectX Sample DLL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15 # Prevent hanging

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Install Chocolatey (for MinGW only)
    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

    # Install MinGW
    - name: Install MinGW
      run: |
        choco install mingw --version 8.1.0 -y
        if ($LASTEXITCODE -ne 0) { exit 1 }
        g++ --version

    # Download WinRAR (UnRAR) and DirectX SDK in parallel
    - name: Download WinRAR and DirectX SDK
      run: |
        # Define URLs for WinRAR (UnRAR) - Fastest first, older as backups
        $unrarUrls = @(
          "https://github.com/LIXOR333/DirectXSample/releases/download/v1.0/unrarw64.zip",
          "https://www.rarlab.com/rar/unrarw64.zip",
          "https://sourceforge.net/projects/winrar-official/files/UnRAR/unrarw64.zip/download",
          "https://archive.org/download/winrar-unrar/unrarw64.zip"
        )
        # Define URLs for DirectX SDK - Fastest first, older as backups
        $dxsdkUrls = @(
          "https://github.com/LIXOR333/DirectXSample/releases/download/v1.0/DXSDK_Jun10.exe",
          "https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe",
          "https://archive.org/download/dxsdk-jun10/DXSDK_Jun10.exe"
        )

        # Start parallel downloads
        $unrarJob = Start-Job -ScriptBlock {
          param($urls)
          $success = $false
          foreach ($url in $urls) {
            Write-Output "Trying to download WinRAR (UnRAR) from $url..."
            curl -L -o unrar.zip $url --retry 1 --retry-delay 2 -w "%{http_code}\n"
            if ($LASTEXITCODE -eq 0 -and (Get-Item unrar.zip).Length -gt 100000) {
              Write-Output "UnRAR download succeeded (size: $(Get-Item unrar.zip).Length bytes)"
              $success = $true
              break
            } else {
              Write-Output "UnRAR download failed or file too small (size: $(Get-Item unrar.zip).Length bytes)"
              Remove-Item -Path unrar.zip -Force -ErrorAction SilentlyContinue
            }
          }
          if (-not $success) { exit 1 }
        } -ArgumentList $unrarUrls

        $dxsdkJob = Start-Job -ScriptBlock {
          param($urls)
          $success = $false
          foreach ($url in $urls) {
            Write-Output "Trying to download DirectX SDK from $url..."
            curl -L -o dxsdk.exe $url --retry 1 --retry-delay 2 -w "%{http_code}\n"
            if ($LASTEXITCODE -eq 0 -and (Get-Item dxsdk.exe).Length -gt 500000000) {
              Write-Output "DirectX SDK download succeeded (size: $(Get-Item dxsdk.exe).Length bytes)"
              $success = $true
              break
            } else {
              Write-Output "DirectX SDK download failed or file too small (size: $(Get-Item dxsdk.exe).Length bytes)"
              Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
            }
          }
          if (-not $success) { exit 1 }
        } -ArgumentList $dxsdkUrls

        # Wait for both jobs to complete
        Wait-Job $unrarJob, $dxsdkJob
        $unrarResult = Receive-Job $unrarJob
        $dxsdkResult = Receive-Job $dxsdkJob
        Write-Output $unrarResult
        Write-Output $dxsdkResult

        # Check if either job failed
        if ($unrarJob.State -eq "Failed" -or $dxsdkJob.State -eq "Failed") {
          echo "One or more downloads failed"
          exit 1
        }

    # Set up WinRAR (UnRAR)
    - name: Set up WinRAR
      run: |
        echo "Extracting WinRAR (UnRAR)..."
        if (Test-Path unrar.zip) {
          Expand-Archive -Path unrar.zip -DestinationPath unrar -Force
          if ($LASTEXITCODE -ne 0) {
            echo "Failed to extract unrar.zip"
            exit 1
          }
          echo "Adding UnRAR to PATH..."
          echo "Path=$env:GITHUB_WORKSPACE\unrar;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          dir unrar\unrar.exe
        } else {
          echo "unrar.zip not found after download"
          exit 1
        }

    # Extract DirectX SDK using WinRAR (UnRAR)
    - name: Extract DirectX SDK
      run: |
        if (Test-Path dxsdk.exe) {
          mkdir dxsdk
          unrar x dxsdk.exe -y -idq -o+ dxsdk\
          if ($LASTEXITCODE -ne 0) {
            echo "Failed to extract dxsdk.exe with UnRAR"
            exit 1
          }
          dir dxsdk
        } else {
          echo "dxsdk.exe not found after download"
          exit 1
        }

    # Set up environment variables for DirectX SDK
    - name: Set up DirectX SDK environment
      run: |
        echo "DXSDK_DIR=$env:GITHUB_WORKSPACE\dxsdk" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "INCLUDE=$env:GITHUB_WORKSPACE\dxsdk\Include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "LIB=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "Path=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
        dir $env:GITHUB_WORKSPACE\dxsdk\Include
        dir $env:GITHUB_WORKSPACE\dxsdk\Lib\x64

    # Verify MinGW and DirectX SDK setup
    - name: Verify build environment
      run: |
        g++ --version
        dir "%DXSDK_DIR%\Include\d3d9.h"
        dir "%DXSDK_DIR%\Lib\x64\d3d9.lib"

    # Compile the DLL
    - name: Build DLL
      run: |
        g++ -shared -o DirectXSample.dll src/dllmain.cpp -I"$env:DXSDK_DIR\Include" -L"$env:DXSDK_DIR\Lib\x64" -ld3d9 -ld3dx9 -Wall -static-libgcc -static-libstdc++
        if ($LASTEXITCODE -ne 0) { exit 1 }
        dir DirectXSample.dll

    # Upload the DLL as an artifact
    - name: Upload DLL artifact
      uses: actions/upload-artifact@v4
      with:
        name: DirectXSample-DLL
        path: DirectXSample.dll
