name: Build DirectX Sample DLL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15 # Prevent hanging

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Install Chocolatey (for MinGW and archiver fallback)
    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

    # Install MinGW
    - name: Install MinGW
      run: |
        choco install mingw --version 8.1.0 -y
        if ($LASTEXITCODE -ne 0) { exit 1 }
        g++ --version

    # Download and set up archiver (PeaZip -> Bandizip -> HAMMER -> IZArc -> UltimateZip -> WinZip -> Chocolatey fallback)
    - name: Download and set up archiver
      run: |
        $archiver = ""
        
        # Try PeaZip
        $urls = @(
          "https://github.com/peazip/PeaZip/releases/download/9.8.0/peazip_portable-9.8.0.WIN64.zip",
          "https://sourceforge.net/projects/peazip/files/9.8.0/peazip_portable-9.8.0.WIN64.zip/download",
          "https://www.softpedia.com/get/Compression-tools/PeaZip.shtml",
          "https://www.majorgeeks.com/files/details/peazip.html",
          "https://www.filehorse.com/download-peazip/64/",
          "https://peazip.github.io/peazip_portable-9.8.0.WIN64.zip"
        )
        $success = $false
        foreach ($url in $urls) {
          echo "Attempting to download PeaZip from $url..."
          curl -L -o archiver.zip $url --retry 1 --retry-delay 2 -w "%{http_code}\n" -s
          $httpStatus = $LASTEXITCODE
          if ($httpStatus -eq 0) {
            $fileSize = (Get-Item archiver.zip -ErrorAction SilentlyContinue).Length
            if ($fileSize -gt 10000000) { # ~10 MB
              echo "PeaZip download succeeded from $url (size: $fileSize bytes)"
              $success = $true
              $archiver = "PeaZip"
              break
            } else {
              echo "File too small ($fileSize bytes), trying next mirror..."
              Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
            }
          } else {
            echo "Download failed with status $httpStatus, trying next mirror..."
            Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
          }
        }

        # If PeaZip failed, try Bandizip
        if (-not $success) {
          $urls = @(
            "https://www.bandisoft.com/bandizip/dl.php?portable",
            "https://sourceforge.net/projects/bandizip/files/bandizip_portable_7.32.zip/download",
            "https://www.softpedia.com/get/Compression-tools/Bandizip.shtml",
            "https://www.filehorse.com/download-bandizip/64/",
            "https://en.bandisoft.com/bandizip/dl.php?portable",
            "https://www.majorgeeks.com/files/details/bandizip.html"
          )
          foreach ($url in $urls) {
            echo "Attempting to download Bandizip from $url..."
            curl -L -o archiver.zip $url --retry 1 --retry-delay 2 -w "%{http_code}\n" -s
            $httpStatus = $LASTEXITCODE
            if ($httpStatus -eq 0) {
              $fileSize = (Get-Item archiver.zip -ErrorAction SilentlyContinue).Length
              if ($fileSize -gt 5000000) { # ~5 MB
                echo "Bandizip download succeeded from $url (size: $fileSize bytes)"
                $success = $true
                $archiver = "Bandizip"
                break
              } else {
                echo "File too small ($fileSize bytes), trying next mirror..."
                Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
              }
            } else {
              echo "Download failed with status $httpStatus, trying next mirror..."
              Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
            }
          }
        }

        # If Bandizip failed, try HAMMER
        if (-not $success) {
          $urls = @(
            "https://www.hamstersoft.com/downloads/hammer-portable.zip",
            "https://sourceforge.net/projects/hammer-archiver/files/hammer-portable-2.0.zip/download",
            "https://www.softpedia.com/get/Compression-tools/HAMMER.shtml",
            "https://www.filehorse.com/download-hammer/64/",
            "https://www.majorgeeks.com/files/details/hammer.html",
            "https://www.hammersoft.com/hammer-portable-2.0.zip"
          )
          foreach ($url in $urls) {
            echo "Attempting to download HAMMER from $url..."
            curl -L -o archiver.zip $url --retry 1 --retry-delay 2 -w "%{http_code}\n" -s
            $httpStatus = $LASTEXITCODE
            if ($httpStatus -eq 0) {
              $fileSize = (Get-Item archiver.zip -ErrorAction SilentlyContinue).Length
              if ($fileSize -gt 9000000) { # ~9 MB
                echo "HAMMER download succeeded from $url (size: $fileSize bytes)"
                $success = $true
                $archiver = "HAMMER"
                break
              } else {
                echo "File too small ($fileSize bytes), trying next mirror..."
                Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
              }
            } else {
              echo "Download failed with status $httpStatus, trying next mirror..."
              Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
            }
          }
        }

        # If HAMMER failed, try IZArc
        if (-not $success) {
          $urls = @(
            "https://www.izarc.org/download/izarc-portable.zip",
            "https://sourceforge.net/projects/izarc/files/izarc-portable-4.5.zip/download",
            "https://www.softpedia.com/get/Compression-tools/IZArc.shtml",
            "https://www.filehorse.com/download-izarc/64/",
            "https://www.majorgeeks.com/files/details/izarc.html",
            "https://www.izarc.org/downloads/izarc-portable-4.5.zip"
          )
          foreach ($url in $urls) {
            echo "Attempting to download IZArc from $url..."
            curl -L -o archiver.zip $url --retry 1 --retry-delay 2 -w "%{http_code}\n" -s
            $httpStatus = $LASTEXITCODE
            if ($httpStatus -eq 0) {
              $fileSize = (Get-Item archiver.zip -ErrorAction SilentlyContinue).Length
              if ($fileSize -gt 4000000) { # ~4 MB
                echo "IZArc download succeeded from $url (size: $fileSize bytes)"
                $success = $true
                $archiver = "IZArc"
                break
              } else {
                echo "File too small ($fileSize bytes), trying next mirror..."
                Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
              }
            } else {
              echo "Download failed with status $httpStatus, trying next mirror..."
              Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
            }
          }
        }

        # If IZArc failed, try UltimateZip
        if (-not $success) {
          $urls = @(
            "https://www.ultimatezip.com/download/ultimatezip-portable.zip",
            "https://sourceforge.net/projects/ultimatezip/files/ultimatezip-portable-3.0.zip/download",
            "https://www.softpedia.com/get/Compression-tools/UltimateZip.shtml",
            "https://www.filehorse.com/download-ultimatezip/64/",
            "https://www.majorgeeks.com/files/details/ultimatezip.html",
            "https://www.ultimatezip.org/ultimatezip-portable-3.0.zip"
          )
          foreach ($url in $urls) {
            echo "Attempting to download UltimateZip from $url..."
            curl -L -o archiver.zip $url --retry 1 --retry-delay 2 -w "%{http_code}\n" -s
            $httpStatus = $LASTEXITCODE
            if ($httpStatus -eq 0) {
              $fileSize = (Get-Item archiver.zip -ErrorAction SilentlyContinue).Length
              if ($fileSize -gt 7000000) { # ~7 MB
                echo "UltimateZip download succeeded from $url (size: $fileSize bytes)"
                $success = $true
                $archiver = "UltimateZip"
                break
              } else {
                echo "File too small ($fileSize bytes), trying next mirror..."
                Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
              }
            } else {
              echo "Download failed with status $httpStatus, trying next mirror..."
              Remove-Item -Path archiver.zip -Force -ErrorAction SilentlyContinue
            }
          }
        }

        # If all failed, fallback to Chocolatey (WinZip)
        if (-not $success) {
          echo "All download attempts failed, falling back to Chocolatey..."
          choco install winzip -y
          if ($LASTEXITCODE -ne 0) {
            echo "Failed to install WinZip via Chocolatey"
            exit 1
          }
          echo "WinZip installed via Chocolatey, using default path..."
          $env:Path += ";C:\Program Files\WinZip"
          echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          $archiver = "WinZip"
          $success = $true
        }

        # Extract the downloaded archiver
        if ($archiver -eq "PeaZip" -or $archiver -eq "Bandizip" -or $archiver -eq "HAMMER" -or $archiver -eq "IZArc" -or $archiver -eq "UltimateZip") {
          echo "Extracting $archiver..."
          if (Test-Path archiver.zip) {
            Expand-Archive -Path archiver.zip -DestinationPath archiver -Force
            if ($LASTEXITCODE -ne 0) {
              echo "Failed to extract archiver.zip - possibly not a valid archive"
              exit 1
            }
            if ($archiver -eq "PeaZip") {
              echo "Adding PeaZip to PATH..."
              echo "Path=$env:GITHUB_WORKSPACE\archiver\peazip_portable-9.8.0.WIN64;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
              dir archiver\peazip_portable-9.8.0.WIN64\peazip.exe
            } elseif ($archiver -eq "Bandizip") {
              echo "Adding Bandizip to PATH..."
              echo "Path=$env:GITHUB_WORKSPACE\archiver;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
              dir archiver\bzip.exe
            } elseif ($archiver -eq "HAMMER") {
              echo "Adding HAMMER to PATH..."
              echo "Path=$env:GITHUB_WORKSPACE\archiver;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
              dir archiver\hammer.exe
            } elseif ($archiver -eq "IZArc") {
              echo "Adding IZArc to PATH..."
              echo "Path=$env:GITHUB_WORKSPACE\archiver;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
              dir archiver\izarc.exe
            } elseif ($archiver -eq "UltimateZip") {
              echo "Adding UltimateZip to PATH..."
              echo "Path=$env:GITHUB_WORKSPACE\archiver;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
              dir archiver\ultimatezip.exe
            }
          } else {
            echo "archiver.zip not found after download"
            exit 1
          }
        }

        # Save the archiver type for later steps
        echo "ARCHIVER=$archiver" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Download DirectX SDK with multiple mirrors
    - name: Download DirectX SDK
      run: |
        $urls = @(
          "https://github.com/LIXOR333/DirectXSample/releases/download/v1.0/DXSDK_Jun10.exe",
          "https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe",
          "https://archive.org/download/dxsdk-jun10/DXSDK_Jun10.exe",
          "https://archive.org/download/microsoft-directx-sdk/DXSDK_Jun10.exe",
          "https://www.majorgeeks.com/files/details/directx_sdk_june_2010.html",
          "https://www.softpedia.com/get/Programming/SDK-DDK/DirectX-SDK-June-2010.shtml",
          "https://archive.org/details/dxsdk_jun10",
          "https://archive.org/details/microsoft_directx_sdk_june_2010"
        )
        $success = $false
        foreach ($url in $urls) {
          echo "Attempting to download DirectX SDK from $url..."
          curl -L -o dxsdk.exe $url --retry 3 --retry-delay 2 -w "%{http_code}\n" -s
          $httpStatus = $LASTEXITCODE
          if ($httpStatus -eq 0) {
            $fileSize = (Get-Item dxsdk.exe -ErrorAction SilentlyContinue).Length
            if ($fileSize -gt 500000000) {
              echo "DirectX SDK download succeeded from $url (size: $fileSize bytes)"
              $success = $true
              break
            } else {
              echo "File too small ($fileSize bytes), trying next mirror..."
              Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
            }
          } else {
            echo "Download failed with status $httpStatus, trying next mirror..."
            Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
          }
        }
        if (-not $success) {
          echo "All download attempts failed for DirectX SDK"
          exit 1
        }

    # Extract DirectX SDK using the selected archiver
    - name: Extract DirectX SDK
      run: |
        if (Test-Path dxsdk.exe) {
          mkdir dxsdk
          $extractSuccess = $false
          
          # Try PeaZip
          if ($env:ARCHIVER -eq "PeaZip") {
            echo "Attempting to extract dxsdk.exe with PeaZip..."
            Start-Process -FilePath peazip.exe -ArgumentList "-ext2here dxsdk.exe" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  Move-Item -Path dxsdk.exe\* -Destination dxsdk -Force
                  $extractSuccess = $true
                } else {
                  echo "Failed to extract dxsdk.exe with PeaZip, exit code: $($process.ExitCode)"
                }
              } else {
                echo "PeaZip extraction timed out after $timeout seconds"
                $process.Kill()
                exit 1
              }
            }
          }
          
          # Try Bandizip if previous failed
          if (-not $extractSuccess -and $env:ARCHIVER -eq "Bandizip") {
            echo "Attempting to extract dxsdk.exe with Bandizip..."
            Start-Process -FilePath bzip.exe -ArgumentList "x dxsdk.exe -o:dxsdk" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  $extractSuccess = $true
                } else {
                  echo "Failed to extract dxsdk.exe with Bandizip, exit code: $($process.ExitCode)"
                }
              } else {
                echo "Bandizip extraction timed out after $timeout seconds"
                $process.Kill()
                exit 1
              }
            }
          }
          
          # Try HAMMER if previous failed
          if (-not $extractSuccess -and $env:ARCHIVER -eq "HAMMER") {
            echo "Attempting to extract dxsdk.exe with HAMMER..."
            Start-Process -FilePath hammer.exe -ArgumentList "-x dxsdk.exe dxsdk" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  $extractSuccess = $true
                } else {
                  echo "Failed to extract dxsdk.exe with HAMMER, exit code: $($process.ExitCode)"
                }
              } else {
                echo "HAMMER extraction timed out after $timeout seconds"
                $process.Kill()
                exit 1
              }
            }
          }
          
          # Try IZArc if previous failed
          if (-not $extractSuccess -and $env:ARCHIVER -eq "IZArc") {
            echo "Attempting to extract dxsdk.exe with IZArc..."
            Start-Process -FilePath izarc.exe -ArgumentList "-x dxsdk.exe -d dxsdk" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  $extractSuccess = $true
                } else {
                  echo "Failed to extract dxsdk.exe with IZArc, exit code: $($process.ExitCode)"
                }
              } else {
                echo "IZArc extraction timed out after $timeout seconds"
                $process.Kill()
                exit 1
              }
            }
          }
          
          # Try UltimateZip if previous failed
          if (-not $extractSuccess -and $env:ARCHIVER -eq "UltimateZip") {
            echo "Attempting to extract dxsdk.exe with UltimateZip..."
            Start-Process -FilePath ultimatezip.exe -ArgumentList "-x dxsdk.exe -o dxsdk" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  $extractSuccess = $true
                } else {
                  echo "Failed to extract dxsdk.exe with UltimateZip, exit code: $($process.ExitCode)"
                }
              } else {
                echo "UltimateZip extraction timed out after $timeout seconds"
                $process.Kill()
                exit 1
              }
            }
          }
          
          # Try WinZip if previous failed
          if (-not $extractSuccess -and $env:ARCHIVER -eq "WinZip") {
            echo "Attempting to extract dxsdk.exe with WinZip..."
            Start-Process -FilePath winzip.exe -ArgumentList "-e dxsdk.exe dxsdk" -Wait -NoNewWindow -PassThru | ForEach-Object {
              $process = $_
              $timeout = 180 # 3 minutes timeout
              $process.WaitForExit($timeout * 1000)
              if ($process.HasExited) {
                if ($process.ExitCode -eq 0) {
                  $extractSuccess = $true
                } else {
                  echo "Failed to extract dxsdk.exe with WinZip, exit code: $($process.ExitCode)"
                }
              } else {
                echo "WinZip extraction timed out after $timeout seconds"
                $process.Kill()
                exit 1
              }
            }
          }
          
          if ($extractSuccess) {
            dir dxsdk
          } else {
            echo "All attempts to extract dxsdk.exe failed"
            exit 1
          }
        } else {
          echo "dxsdk.exe not found after download"
          exit 1
        }

    # Set up environment variables for DirectX SDK
    - name: Set up DirectX SDK environment
      run: |
        echo "DXSDK_DIR=$env:GITHUB_WORKSPACE\dxsdk" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "INCLUDE=$env:GITHUB_WORKSPACE\dxsdk\Include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "LIB=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "Path=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
        dir $env:GITHUB_WORKSPACE\dxsdk\Include
        dir $env:GITHUB_WORKSPACE\dxsdk\Lib\x64

    # Verify MinGW and DirectX SDK setup
    - name: Verify build environment
      run: |
        g++ --version
        dir "%DXSDK_DIR%\Include\d3d9.h"
        dir "%DXSDK_DIR%\Lib\x64\d3d9.lib"

    # Compile the DLL
    - name: Build DLL
      run: |
        g++ -shared -o DirectXSample.dll src/dllmain.cpp -I"$env:DXSDK_DIR\Include" -L"$env:DXSDK_DIR\Lib\x64" -ld3d9 -ld3dx9 -Wall -static-libgcc -static-libstdc++
        if ($LASTEXITCODE -ne 0) { exit 1 }
        dir DirectXSample.dll

    # Upload the DLL as an artifact
    - name: Upload DLL artifact
      uses: actions/upload-artifact@v4
      with:
        name: DirectXSample-DLL
        path: DirectXSample.dll
