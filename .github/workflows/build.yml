name: Build DirectX Sample DLL with Maximum Reliability

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fix Git Config
        shell: pwsh
        run: |
          echo "Configuring Git safe directory at 05:26 PM MSK, 18 May 2025..."
          git config --global --add safe.directory $env:GITHUB_WORKSPACE
          git config --local --unset-all http.https://github.com/.extraheader || echo "No extraheader to unset"
          git config --local --unset-all core.sshCommand || echo "No SSH config to unset"
          git submodule foreach --recursive "git config --local --unset-all http.https://github.com/.extraheader || echo 'No extraheader'; git config --local --unset-all core.sshCommand || echo 'No SSH config'"

      - name: Install Chocolatey
        shell: pwsh
        run: |
          echo "Checking for existing Chocolatey installation at 05:26 PM MSK, 18 May 2025..."
          $chocoExists = $false
          try {
            choco -v
            if ($LASTEXITCODE -eq 0) {
              echo "Chocolatey is already installed"
              $chocoExists = $true
            }
          } catch {
            echo "Chocolatey not found, proceeding with installation..."
          }
          if (-not $chocoExists) {
            echo "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            if ($LASTEXITCODE -ne 0) {
              echo "Chocolatey installation failed with exit code $LASTEXITCODE"
              exit 1
            }
            echo "Chocolatey installed successfully"
          }

      - name: Install MinGW
        shell: pwsh
        run: |
          echo "Installing MinGW at 05:26 PM MSK, 18 May 2025..."
          choco install mingw --version 8.1.0 -y
          if ($LASTEXITCODE -ne 0) {
            echo "MinGW installation failed with exit code $LASTEXITCODE"
            exit 1
          }
          $env:Path += ";C:\tools\mingw64\bin"
          echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          g++ --version
          if ($LASTEXITCODE -ne 0) {
            echo "MinGW verification failed"
            exit 1
          }
          echo "MinGW installed successfully"

      - name: Download DirectX SDK
        shell: pwsh
        run: |
          echo "Downloading DirectX SDK at 05:26 PM MSK, 18 May 2025..."
          $urls = @(
            "https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe",
            "https://github.com/LIXOR333/DirectXSample/releases/download/v1.0/DXSDK_Jun10.exe",
            "https://archive.org/download/dxsdk-jun10/DXSDK_Jun10.exe",
            "https://web.archive.org/web/20160330101053/https://download.microsoft.com/download/A/E/7/AE743F1F-632B-4809-87A9-AA1BB3458E31/DXSDK_Jun10.exe"
          )
          $success = $false
          $maxAttempts = 5
          foreach ($url in $urls) {
            echo "Attempting to download from $url..."
            for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
              curl -L -o dxsdk.exe $url --retry 5 --retry-delay 5
              if ($LASTEXITCODE -eq 0 -and (Test-Path dxsdk.exe)) {
                $fileSize = (Get-Item dxsdk.exe).Length
                echo "Downloaded file size: $fileSize bytes"
                if ($fileSize -gt 500000000) {
                  $checkResult = $null
                  if (Get-Command "7z" -ErrorAction SilentlyContinue) {
                    $checkResult = 7z l dxsdk.exe -r 2>&1
                  } elseif (Get-Command "rar" -ErrorAction SilentlyContinue) {
                    $checkResult = rar lt dxsdk.exe 2>&1
                  }
                  if ($checkResult -and $checkResult -match "Include" -and $checkResult -match "Lib") {
                    echo "DirectX SDK content verified, size $fileSize bytes"
                    $success = $true
                    break
                  } else {
                    echo "Downloaded file does not contain expected DirectX SDK structure, size $fileSize bytes"
                    Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
                  }
                } else {
                  echo "Downloaded file too small ($fileSize bytes), retrying attempt $attempt of $maxAttempts..."
                  Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
                }
              } else {
                echo "Download failed with exit code $LASTEXITCODE, retrying attempt $attempt of $maxAttempts..."
                Remove-Item -Path dxsdk.exe -Force -ErrorAction SilentlyContinue
              }
              Start-Sleep -Seconds 5
            }
            if ($success) { break }
            echo "Failed to download from $url after $maxAttempts attempts, trying next mirror..."
          }
          if (-not $success) {
            echo "All download attempts failed for DirectX SDK after exhausting all mirrors and attempts"
            exit 1
          }

      - name: Install Archivers
        shell: pwsh
        run: |
          echo "Installing archivers at 05:26 PM MSK, 18 May 2025..."
          $archivers = @(
            @{
              Name = "7-Zip"
              Urls = @(
                "https://www.7-zip.org/a/7z2301-x64.exe",
                "https://sourceforge.net/projects/sevenzip/files/7-Zip/23.01/7z2301-x64.exe/download",
                "https://github.com/ip7z/7zip/releases/download/23.01/7z2301-x64.exe",
                "https://web.archive.org/web/20230601000000/https://www.7-zip.org/a/7z2301-x64.exe"
              )
              InstallPath = "C:\Program Files\7-Zip"
              Command = "7z"
              InstallArgs = "/S"
              TestCommand = "7z --help"
            },
            @{
              Name = "WinRAR"
              Urls = @(
                "https://www.rarlab.com/rar/winrar-x64-701.exe",
                "https://www.win-rar.com/fileadmin/winrar-versions/winrar-x64-701.exe",
                "https://web.archive.org/web/20240801000000/https://www.rarlab.com/rar/winrar-x64-701.exe",
                "https://sourceforge.net/projects/winrar/files/WinRAR/7.01/winrar-x64-701.exe/download"
              )
              InstallPath = "C:\Program Files\WinRAR"
              Command = "rar"
              InstallArgs = "/S"
              TestCommand = "rar -?"
            },
            @{
              Name = "PeaZip"
              Urls = @(
                "https://github.com/peazip/PeaZip/releases/download/10.0.0/peazip-10.0.0.WIN64.exe",
                "https://sourceforge.net/projects/peazip/files/10.0.0/peazip-10.0.0.WIN64.exe/download",
                "https://web.archive.org/web/20240801000000/https://github.com/peazip/PeaZip/releases/download/10.0.0/peazip-10.0.0.WIN64.exe"
              )
              InstallPath = "C:\Program Files\PeaZip"
              Command = "peazip.exe"
              InstallArgs = "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART"
              TestCommand = "& 'C:\Program Files\PeaZip\peazip.exe' -h"
            },
            @{
              Name = "Bandizip"
              Urls = @(
                "https://dl.bandisoft.com/bandizip/BANDIZIP-SETUP.EXE",
                "https://www.bandizip.com/dl/BANDIZIP-SETUP.EXE",
                "https://sourceforge.net/projects/bandizip/files/Bandizip/7.32/BANDIZIP-SETUP.EXE/download",
                "https://web.archive.org/web/20240801000000/https://dl.bandisoft.com/bandizip/BANDIZIP-SETUP.EXE"
              )
              InstallPath = "C:\Program Files\Bandizip"
              Command = "Bandizip.exe"
              InstallArgs = "/S"
              TestCommand = "& 'C:\Program Files\Bandizip\Bandizip.exe' --help"
            },
            @{
              Name = "NanaZip"
              Urls = @(
                "https://github.com/M2Team/NanaZip/releases/download/3.0.850/NanaZipSetup.exe",
                "https://sourceforge.net/projects/nanazip/files/3.0.850/NanaZipSetup.exe/download",
                "https://web.archive.org/web/20240801000000/https://github.com/M2Team/NanaZip/releases/download/3.0.850/NanaZipSetup.exe"
              )
              InstallPath = "C:\Program Files\NanaZip"
              Command = "NanaZip.exe"
              InstallArgs = "/S"
              TestCommand = "& 'C:\Program Files\NanaZip\NanaZip.exe' --help"
            }
          )

          $installedArchivers = @()

          foreach ($archiver in $archivers) {
            $success = $false
            foreach ($url in $archiver.Urls) {
              echo "Attempting to download $($archiver.Name) from $url..."
              curl -L -o "$($archiver.Name).exe" $url --retry 5 --retry-delay 5
              if ($LASTEXITCODE -eq 0 -and (Test-Path "$($archiver.Name).exe")) {
                $fileSize = (Get-Item "$($archiver.Name).exe").Length
                echo "Downloaded file size: $fileSize bytes"
                if ($fileSize -gt 1MB) {
                  Start-Process -FilePath "$($archiver.Name).exe" -ArgumentList $archiver.InstallArgs -Wait -NoNewWindow
                  if ($LASTEXITCODE -eq 0) {
                    $env:Path += ";$($archiver.InstallPath)"
                    echo "Path=$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
                    $testResult = Invoke-Expression $archiver.TestCommand 2>&1
                    if ($LASTEXITCODE -eq 0) {
                      echo "$($archiver.Name) installed successfully"
                      $success = $true
                      $installedArchivers += $archiver
                      break
                    } else {
                      echo "$($archiver.Name) test failed: $testResult"
                    }
                  }
                } else {
                  echo "File size too small ($fileSize bytes), likely corrupted. Skipping to next URL..."
                }
                Remove-Item -Path "$($archiver.Name).exe" -Force -ErrorAction SilentlyContinue
              }
              echo "Failed to install $($archiver.Name) from $url, trying next source..."
            }
            if (-not $success) {
              echo "Warning: $($archiver.Name) installation failed, proceeding with other archivers..."
            }
          }

          if ($installedArchivers.Count -eq 0) {
            echo "Error: No archivers were installed successfully"
            exit 1
          }

          echo "Successfully installed archivers: $($installedArchivers.Name -join ', ')"

      - name: Extract DirectX SDK
        shell: pwsh
        run: |
          echo "Extracting DirectX SDK at 05:26 PM MSK, 18 May 2025..."
          if (-not (Test-Path dxsdk.exe)) {
            echo "dxsdk.exe not found"
            exit 1
          }

          mkdir dxsdk -ErrorAction SilentlyContinue
          $extractSuccess = $false
          $maxExtractAttempts = 5

          # Список установленных архиваторов из предыдущего шага
          $installedArchivers = @(
            @{Name="7-Zip"; Command="7z"; ExtractCommand="7z x dxsdk.exe -o`"`"dxsdk`"`" -y"; CheckCommand="7z l dxsdk.exe -r"},
            @{Name="WinRAR"; Command="rar"; ExtractCommand="rar x dxsdk.exe dxsdk\ -y"; CheckCommand="rar lt dxsdk.exe"},
            @{Name="PeaZip"; Command="peazip.exe"; ExtractCommand="& 'C:\Program Files\PeaZip\peazip.exe' -ext2here dxsdk.exe"; CheckCommand="& 'C:\Program Files\PeaZip\peazip.exe' -l dxsdk.exe"; PostExtract="Move-Item -Path dxsdk.exe\* -Destination dxsdk -Force -ErrorAction SilentlyContinue"},
            @{Name="Bandizip"; Command="Bandizip.exe"; ExtractCommand="& 'C:\Program Files\Bandizip\Bandizip.exe' x dxsdk.exe -o dxsdk"; CheckCommand="& 'C:\Program Files\Bandizip\Bandizip.exe' l dxsdk.exe"},
            @{Name="NanaZip"; Command="NanaZip.exe"; ExtractCommand="& 'C:\Program Files\NanaZip\NanaZip.exe' x dxsdk.exe -o dxsdk"; CheckCommand="& 'C:\Program Files\NanaZip\NanaZip.exe' l dxsdk.exe"}
          )

          # Проверяем содержимое dxsdk.exe перед распаковкой
          echo "Checking contents of dxsdk.exe..."
          $checkSuccess = $false
          foreach ($archiver in $installedArchivers) {
            if ((Test-Path "C:\Program Files\$($archiver.Name)\$($archiver.Command)") -or (Get-Command $archiver.Command -ErrorAction SilentlyContinue)) {
              echo "Checking with $($archiver.Name)..."
              $checkResult = Invoke-Expression $archiver.CheckCommand 2>&1
              if ($LASTEXITCODE -eq 0 -and $checkResult -match "Include" -and $checkResult -match "Lib") {
                echo "Contents check succeeded with $($archiver.Name), sample output: $checkResult"
                $checkSuccess = $true
                break
              } else {
                echo "Failed to list contents with $($archiver.Name), output: $checkResult"
              }
            }
          }
          if (-not $checkSuccess) {
            echo "Error: Unable to check contents with any archiver"
            exit 1
          }

          # Пробуем распаковать dxsdk.exe каждым архиватором по очереди
          foreach ($archiver in $installedArchivers) {
            if (-not ((Test-Path "C:\Program Files\$($archiver.Name)\$($archiver.Command)") -or (Get-Command $archiver.Command -ErrorAction SilentlyContinue))) {
              echo "Skipping $($archiver.Name) - not installed or not found"
              continue
            }

            echo "Attempting to extract dxsdk.exe with $($archiver.Name)..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              Invoke-Expression $archiver.ExtractCommand
              if ($LASTEXITCODE -eq 0) {
                if ($archiver.PostExtract) {
                  Invoke-Expression $archiver.PostExtract
                }
                # Проверяем наличие папок Include и Lib
                if (Test-Path dxsdk\Include -and Test-Path dxsdk\Lib) {
                  echo "$($archiver.Name) extracted dxsdk.exe successfully on attempt $attempt"
                  $extractSuccess = $true
                  break
                } else {
                  echo "$($archiver.Name) extracted but required folders (Include/Lib) not found on attempt $attempt, retrying with next archiver..."
                  Remove-Item -Path dxsdk\* -Recurse -Force -ErrorAction SilentlyContinue
                }
              } else {
                echo "$($archiver.Name) failed to extract dxsdk.exe on attempt $attempt, exit code $LASTEXITCODE, switching to next archiver..."
                Remove-Item -Path dxsdk\* -Recurse -Force -ErrorAction SilentlyContinue
              }
              Start-Sleep -Seconds 5
            }
            if ($extractSuccess) { break }
            echo "$($archiver.Name) failed after $maxExtractAttempts attempts, trying next archiver..."
          }

          if (-not $extractSuccess) {
            echo "Error: Failed to extract dxsdk.exe with all available archivers"
            exit 1
          }

          # Логируем файлы после первой распаковки
          echo "Listing all files in dxsdk folder after initial extraction:"
          Get-ChildItem -Path dxsdk -Recurse | ForEach-Object { echo "$($_.FullName) ($($_.Length) bytes)" }

          # Ищем большой файл (CAB или другой архив)
          echo "Searching for potential large files (>300MB)..."
          $largeFile = Get-ChildItem -Path dxsdk -Recurse -File | Where-Object { $_.Length -gt 300000000 } | Select-Object -First 1
          if ($largeFile) {
            echo "Found large file: $($largeFile.FullName), size: $($largeFile.Length) bytes"
            Move-Item -Path $largeFile.FullName -Destination "dxsdk\dxsdk.cab" -Force
          } else {
            echo "No large file found with size > 300MB. Trying alternative extraction method..."
            $potentialCabs = Get-ChildItem -Path dxsdk -Recurse -File | Where-Object { $_.Extension -match "\.cab|\.msi|\.zip" -and $_.Length -gt 100000000 } | Select-Object -First 1
            if ($potentialCabs) {
              echo "Found potential CAB file: $($potentialCabs.FullName), size: $($potentialCabs.Length) bytes"
              Move-Item -Path $potentialCabs.FullName -Destination "dxsdk\dxsdk.cab" -Force
            } else {
              echo "No CAB or similar archive found in dxsdk folder"
              Get-ChildItem -Path dxsdk -Recurse -File | ForEach-Object { echo "File: $($_.FullName), Size: $($_.Length) bytes" }
              exit 1
            }
          }

          # Распаковываем CAB-файл с помощью доступных архиваторов
          $cabExtractSuccess = $false
          foreach ($archiver in $installedArchivers) {
            if (-not ((Test-Path "C:\Program Files\$($archiver.Name)\$($archiver.Command)") -or (Get-Command $archiver.Command -ErrorAction SilentlyContinue))) {
              echo "Skipping $($archiver.Name) for CAB extraction - not installed or not found"
              continue
            }

            echo "Attempting to extract dxsdk.cab with $($archiver.Name)..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              $cabExtractCommand = $archiver.ExtractCommand -replace "dxsdk.exe", "dxsdk\dxsdk.cab" -replace "-o dxsdk", "-o dxsdk\extracted"
              if ($archiver.Name -eq "WinRAR") {
                $cabExtractCommand = "rar x dxsdk\dxsdk.cab dxsdk\extracted\ -y"
              } elseif ($archiver.Name -eq "PeaZip") {
                $cabExtractCommand = "& 'C:\Program Files\PeaZip\peazip.exe' -ext2here dxsdk\dxsdk.cab"
              }
              Invoke-Expression $cabExtractCommand
              if ($LASTEXITCODE -eq 0) {
                if ($archiver.Name -eq "PeaZip") {
                  Move-Item -Path dxsdk\dxsdk.cab\* -Destination dxsdk\extracted -Force -ErrorAction SilentlyContinue
                }
                if (Test-Path dxsdk\extracted) {
                  echo "$($archiver.Name) extracted dxsdk.cab successfully on attempt $attempt"
                  $cabExtractSuccess = $true
                  break
                } else {
                  echo "$($archiver.Name) extracted but extracted folder not found on attempt $attempt, retrying with next archiver..."
                  Remove-Item -Path dxsdk\extracted -Recurse -Force -ErrorAction SilentlyContinue
                }
              } else {
                echo "$($archiver.Name) failed to extract dxsdk.cab on attempt $attempt, exit code $LASTEXITCODE, switching to next archiver..."
                Remove-Item -Path dxsdk\extracted -Recurse -Force -ErrorAction SilentlyContinue
              }
              Start-Sleep -Seconds 5
            }
            if ($cabExtractSuccess) { break }
            echo "$($archiver.Name) failed to extract dxsdk.cab after $maxExtractAttempts attempts, trying next archiver..."
          }

          if (-not $cabExtractSuccess) {
            echo "Error: Failed to extract dxsdk.cab with all available archivers"
            exit 1
          }

          # Перемещаем файлы из extracted в dxsdk
          echo "Moving extracted files to dxsdk folder..."
          Move-Item -Path dxsdk\extracted\* -Destination dxsdk -Force -ErrorAction SilentlyContinue
          Remove-Item -Path dxsdk\extracted -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path dxsdk\dxsdk.cab -Force -ErrorAction SilentlyContinue

          # Проверяем наличие папки Include
          echo "Listing files in dxsdk folder after CAB extraction:"
          Get-ChildItem -Path dxsdk -Recurse | ForEach-Object { echo "$($_.FullName) ($($_.Length) bytes)" }
          if (Test-Path dxsdk\Include) {
            echo "DirectX SDK extracted successfully, Include folder found!"
          } else {
            echo "Include folder not found after extraction. Attempting alternative extraction..."
            echo "Running dxsdk.exe as installer..."
            for ($attempt = 1; $attempt -le $maxExtractAttempts; $attempt++) {
              Start-Process -FilePath "dxsdk.exe" -ArgumentList "/S /D=dxsdk_install" -Wait -NoNewWindow
              if ($LASTEXITCODE -eq 0 -and (Test-Path dxsdk_install)) {
                echo "Installer ran successfully on attempt $attempt, moving files to dxsdk..."
                Move-Item -Path dxsdk_install\* -Destination dxsdk -Force -ErrorAction SilentlyContinue
                Remove-Item -Path dxsdk_install -Recurse -Force -ErrorAction SilentlyContinue
                if (Test-Path dxsdk\Include) {
                  echo "DirectX SDK extracted successfully via installer on attempt $attempt!"
                  break
                } else {
                  echo "Include folder still not found after installer on attempt $attempt, retrying..."
                  if ($attempt -eq $maxExtractAttempts) {
                    echo "Installer failed to create Include folder after $maxExtractAttempts attempts"
                    exit 1
                  }
                  Start-Sleep -Seconds 5
                }
              } else {
                echo "Installer failed on attempt $attempt with exit code $LASTEXITCODE, retrying..."
                if ($attempt -eq $maxExtractAttempts) {
                  echo "Installer failed after $maxExtractAttempts attempts"
                  exit 1
                }
                Start-Sleep -Seconds 5
              }
            }
          }

      - name: Set up DirectX SDK environment
        shell: pwsh
        run: |
          echo "Setting up DirectX SDK environment at 05:26 PM MSK, 18 May 2025..."
          echo "DXSDK_DIR=$env:GITHUB_WORKSPACE\dxsdk" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "INCLUDE=$env:GITHUB_WORKSPACE\dxsdk\Include;$env:INCLUDE" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "LIB=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "Path=$env:GITHUB_WORKSPACE\dxsdk\Lib\x64;C:\tools\mingw64\bin;$env:Path" | Out-File -FilePath $env:GITHUB_ENV -Append
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\dxsdk\Include")) {
            echo "Include folder not found"
            exit 1
          }
          echo "Environment variables set successfully"

      - name: Build DirectXSample DLL
        shell: pwsh
        run: |
          echo "Compiling DirectXSample DLL at 05:26 PM MSK, 18 May 2025..."
          g++ -shared -o DirectXSample.dll src/dllmain.cpp -I"$env:DXSDK_DIR\Include" -L"$env:DXSDK_DIR\Lib\x64" -ld3d9 -ld3dx9 -Wall -static-libgcc -static-libstdc++ -O2
          if ($LASTEXITCODE -ne 0) {
            echo "DirectXSample DLL compilation failed with exit code $LASTEXITCODE"
            exit 1
          }
          if (-not (Test-Path DirectXSample.dll)) {
            echo "DirectXSample.dll not created"
            exit 1
          }
          echo "DirectXSample DLL compilation completed"

      - name: Upload DLL artifact
        uses: actions/upload-artifact@v4
        with:
          name: DirectXSample-DLL
          path: DirectXSample.dll
