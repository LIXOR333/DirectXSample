name: Build Rust Alkad 2588 Cheat DLL

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2019

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          imgui
          minhook
          zlib
          json-develop
        key: ${{ runner.os }}-deps-${{ hashFiles('.github/workflows/build.yml') }}

    - name: Install Visual Studio 2019 Build Tools
      run: |
        echo Installing Visual Studio 2019 Build Tools... >> logs/build.log
        powershell -Command "Invoke-WebRequest -Uri 'https://aka.ms/vs/16/release/vs_buildtools.exe' -OutFile 'vs_buildtools.exe'"
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to download Visual Studio 2019 Build Tools >> logs/build.log
          exit 1
        )
        powershell -Command ".\vs_buildtools.exe --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --quiet --wait --norestart || exit 0"
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to install Visual Studio 2019 Build Tools components >> logs/build.log
          exit 1
        )
        echo Visual Studio 2019 Build Tools installed >> logs/build.log
      shell: cmd

    - name: Set up MSVC for Visual Studio 2019
      run: |
        echo Setting up MSVC for Visual Studio 2019... >> logs/build.log
        for /f "tokens=*" %%i in ('"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -version 16 -property installationPath') do set "VS2019_PATH=%%i"
        if not defined VS2019_PATH (
          echo Error: Visual Studio 2019 not found >> logs/build.log
          exit 1
        )
        call "%VS2019_PATH%\VC\Auxiliary\Build\vcvars64.bat"
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to set up MSVC for Visual Studio 2019 >> logs/build.log
          exit 1
        )
        echo MSVC for Visual Studio 2019 set up successfully >> logs/build.log
      shell: cmd

    - name: Create log directory
      run: |
        if not exist logs mkdir logs
        echo Created logs directory >> logs/build.log
      shell: cmd

    - name: Download ImGui (full repository)
      run: |
        echo Downloading ImGui... >> logs/build.log
        curl -L -o imgui.zip https://github.com/ocornut/imgui/archive/refs/heads/master.zip
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to download ImGui from primary source >> logs/build.log
          exit 1
        )
        echo Unzipping ImGui... >> logs/build.log
        powershell -command "Expand-Archive -Path imgui.zip -DestinationPath temp_imgui -Force"
        if not exist temp_imgui\imgui-master (
          echo Error: imgui-master directory not found after unzip >> logs/build.log
          dir temp_imgui /s /b >> logs/build.log 2>&1
          exit 1
        )
        move temp_imgui\imgui-master imgui
        if not exist imgui\imgui.h (
          echo Error: imgui.h not found in imgui >> logs/build.log
          dir imgui /s /b >> logs/build.log 2>&1
          exit 1
        )
        if not exist imgui\backends\imgui_impl_dx11.h (
          echo Error: imgui_impl_dx11.h not found in imgui/backends >> logs/build.log
          dir imgui\backends /s /b >> logs/build.log 2>&1
          exit 1
        )
        echo ImGui downloaded and verified >> logs/build.log
      shell: cmd
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Download and Build MinHook
      run: |
        echo Downloading MinHook... >> logs/build.log
        curl -L -o minhook.zip https://github.com/TsudaKageyu/minhook/archive/refs/heads/master.zip
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to download MinHook from primary source >> logs/build.log
          exit 1
        )
        echo Unzipping MinHook... >> logs/build.log
        powershell -command "Expand-Archive -Path minhook.zip -DestinationPath temp_minhook -Force"
        if not exist temp_minhook\minhook-master (
          echo Error: MinHook directory not found after unzip >> logs/build.log
          dir temp_minhook /s /b >> logs/build.log 2>&1
          exit 1
        )
        move temp_minhook\minhook-master minhook
        if not exist minhook\include\MinHook.h (
          echo Error: MinHook.h not found in minhook >> logs/build.log
          dir minhook /s /b >> logs/build.log 2>&1
          exit 1
        )
        if not exist minhook\minhook.sln (
          echo Error: minhook.sln not found in minhook >> logs/build.log
          dir minhook /s /b >> logs/build.log 2>&1
          exit 1
        )
        echo Building MinHook... >> logs/build.log
        cd minhook
        msbuild minhook.sln /p:Configuration=Release /p:Platform=x64 /v:d > build.log 2>&1
        if %ERRORLEVEL% NEQ 0 (
          echo Error: Failed to build MinHook with msbuild >> logs/build.log
          type build.log >> ../logs/build.log
          exit 1
        )
        echo Searching for MinHook library... >> ../logs/build.log
        dir *MinHook*.lib /s /b 2>> ../logs/build.log || echo No MinHook library found >> ../logs/build.log
        set "MINHOOK_LIB_PATH="
        for /f "tokens=*" %%i in ('dir *MinHook*.lib /s /b 2^>nul') do set "MINHOOK_LIB_PATH=%%i"
        if not defined MINHOOK_LIB_PATH (
          echo Error: MinHook library file not found after build >> ../logs/build.log
          dir /s /b >> ../logs/build.log 2>&1
          exit 1
        )
        echo Found MinHook library at %MINHOOK_LIB_PATH% >> ../logs/build.log
        copy "%MINHOOK_LIB_PATH%" MinHook.lib
        if %ERRORLEVEL% NEQ 0 (
          echo Error: Failed to copy MinHook library to MinHook.lib >> ../logs/build.log
          exit 1
        )
        cd ..
        echo MinHook downloaded, built, and verified >> logs/build.log
      shell: cmd
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Download and Build zlib
      run: |
        echo Downloading zlib... >> logs/build.log
        curl -L -o zlib.tar.gz https://zlib.net/zlib-1.3.1.tar.gz
        if %ERRORLEVEL% NEQ 0 (
          echo Failed to download zlib from primary source >> logs/build.log
          exit 1
        )
        echo Extracting zlib... >> logs/build.log
        tar
